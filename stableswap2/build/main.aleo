program stableswap.aleo;

record Token:
    owner as address.private;
    amount as u128.private;
    token_id as u64.private;

struct TokenInfo:
    token_id as u64;
    max_supply as u128;
    decimals as u8;

struct PoolKey:
    token1 as u64;
    token2 as u64;

record PoolAdmin:
    owner as address.private;
    pool_key as field.private;

struct PoolInfo:
    id as field;
    token1_id as u64;
    token2_id as u64;
    reserve1 as u128;
    reserve2 as u128;
    ampl_coef as u128;
    lp_total_supply as u128;
    swap_fee as u128;

struct DepositKey:
    holder as address;
    pool_key as field;
    deposit_id as field;

record LpTokenReceipt:
    owner as address.private;
    token1_id as u64.private;
    token2_id as u64.private;
    deposit_id as field.private;


mapping registered_tokens:
	key as u64.public;
	value as TokenInfo.public;


mapping amm_pools:
	key as field.public;
	value as PoolInfo.public;


mapping amm_deposits:
	key as field.public;
	value as u128.public;

function create_token:
    input r0 as u64.private;
    input r1 as u8.private;
    input r2 as u128.private;
    cast r0 r2 r1 into r3 as TokenInfo;
    async create_token r3 into r4;
    output r4 as stableswap.aleo/create_token.future;

finalize create_token:
    input r0 as TokenInfo.public;
    contains registered_tokens[r0.token_id] into r1;
    not r1 into r2;
    assert.eq r2 true;
    set r0 into registered_tokens[r0.token_id];


function mint_private:
    input r0 as address.private;
    input r1 as u64.private;
    input r2 as u128.private;
    pow 10u128 6u8 into r3;
    mul 1000u128 r3 into r4;
    lte r2 r4 into r5;
    assert.eq r5 true;
    cast r0 r2 r1 into r6 as Token.record;
    async mint_private r1 into r7;
    output r6 as Token.record;
    output r7 as stableswap.aleo/mint_private.future;

finalize mint_private:
    input r0 as u64.public;
    get registered_tokens[r0] into r1;
















function create_pool:
    input r0 as address.private;
    input r1 as Token.record;
    input r2 as u128.private;
    input r3 as Token.record;
    input r4 as u128.private;
    input r5 as u128.private;
    input r6 as u128.private;
    gt r2 0u128 into r7;
    gt r4 0u128 into r8;
    and r7 r8 into r9;
    assert.eq r9 true;
    lte r6 10000u128 into r10;
    assert.eq r10 true;
    is.neq r1.token_id r3.token_id into r11;
    assert.eq r11 true;
    gte r1.amount r2 into r12;
    gte r3.amount r4 into r13;
    and r12 r13 into r14;
    assert.eq r14 true;
    sub r1.amount r2 into r15;
    cast r0 r15 r1.token_id into r16 as Token.record;
    sub r3.amount r4 into r17;
    cast r0 r17 r3.token_id into r18 as Token.record;
    gt r1.token_id r3.token_id into r19;
    ternary r19 r3.owner r1.owner into r20;
    ternary r19 r3.amount r1.amount into r21;
    ternary r19 r3.token_id r1.token_id into r22;
    cast r20 r21 r22 into r23 as Token.record;
    lt r1.token_id r3.token_id into r24;
    ternary r24 r3.owner r1.owner into r25;
    ternary r24 r3.amount r1.amount into r26;
    ternary r24 r3.token_id r1.token_id into r27;
    cast r25 r26 r27 into r28 as Token.record;
    gt r1.token_id r3.token_id into r29;
    ternary r29 r4 r2 into r30;
    lt r1.token_id r3.token_id into r31;
    ternary r31 r4 r2 into r32;
    gt r23.token_id r28.token_id into r33;
    ternary r33 r28.token_id r23.token_id into r34;
    lte r23.token_id r28.token_id into r35;
    ternary r35 r28.token_id r23.token_id into r36;
    cast r34 r36 into r37 as PoolKey;
    hash.bhp256 r37 into r38 as field;
    cast r0 r38 into r39 as PoolAdmin.record;
    async create_pool r38 r23.token_id r30 r28.token_id r32 r5 r6 into r40;
    output r39 as PoolAdmin.record;
    output r16 as Token.record;
    output r18 as Token.record;
    output r40 as stableswap.aleo/create_pool.future;

finalize create_pool:
    input r0 as field.public;
    input r1 as u64.public;
    input r2 as u128.public;
    input r3 as u64.public;
    input r4 as u128.public;
    input r5 as u128.public;
    input r6 as u128.public;
    contains amm_pools[r0] into r7;
    not r7 into r8;
    assert.eq r8 true;
    mul r2 r4 into r9;
    cast r0 r1 r3 r2 r4 r5 r9 r6 into r10 as PoolInfo;
    set r10 into amm_pools[r0];


function transfer_pool_ownership:
    input r0 as PoolAdmin.record;
    input r1 as address.private;
    is.eq r0.owner self.caller into r2;
    assert.eq r2 true;
    cast r1 r0.pool_key into r3 as PoolAdmin.record;
    output r3 as PoolAdmin.record;


function add_liquidity:
    input r0 as address.private;
    input r1 as Token.record;
    input r2 as u128.private;
    input r3 as Token.record;
    input r4 as u128.private;
    input r5 as field.private;
    input r6 as u128.private;
    input r7 as u128.private;
    input r8 as u128.private;
    sub r1.amount r2 into r9;
    sub r3.amount r4 into r10;
    add r6 r7 into r11;
    is.eq r11 0u128 into r12;
    mul r8 2u128 into r13;
    mul r11 r11 into r14;
    mul r6 2u128 into r15;
    div r14 r15 into r16;
    mul r16 r11 into r17;
    mul r7 2u128 into r18;
    div r17 r18 into r19;
    mul r13 r11 into r20;
    mul r19 2u128 into r21;
    add r20 r21 into r22;
    mul r22 r11 into r23;
    sub r13 1u128 into r24;
    mul r24 r11 into r25;
    mul 3u128 r19 into r26;
    add r25 r26 into r27;
    div r23 r27 into r28;
    gt r28 r11 into r29;
    ternary r29 r28 r11 into r30;
    lt r28 r11 into r31;
    ternary r31 r28 r11 into r32;
    sub r30 r32 into r33;
    lte r33 1u128 into r34;
    ternary r34 true false into r35;
    mul r28 r28 into r36;
    mul r6 2u128 into r37;
    div r36 r37 into r38;
    mul r38 r28 into r39;
    mul r7 2u128 into r40;
    div r39 r40 into r41;
    mul r13 r11 into r42;
    mul r41 2u128 into r43;
    add r42 r43 into r44;
    mul r44 r28 into r45;
    sub r13 1u128 into r46;
    mul r46 r28 into r47;
    mul 3u128 r41 into r48;
    add r47 r48 into r49;
    div r45 r49 into r50;
    gt r50 r28 into r51;
    ternary r51 r50 r28 into r52;
    lt r50 r28 into r53;
    ternary r53 r50 r28 into r54;
    sub r52 r54 into r55;
    lte r55 1u128 into r56;
    ternary r56 true false into r57;
    mul r50 r50 into r58;
    mul r6 2u128 into r59;
    div r58 r59 into r60;
    mul r60 r50 into r61;
    mul r7 2u128 into r62;
    div r61 r62 into r63;
    mul r13 r11 into r64;
    mul r63 2u128 into r65;
    add r64 r65 into r66;
    mul r66 r50 into r67;
    sub r13 1u128 into r68;
    mul r68 r50 into r69;
    mul 3u128 r63 into r70;
    add r69 r70 into r71;
    div r67 r71 into r72;
    gt r72 r50 into r73;
    ternary r73 r72 r50 into r74;
    lt r72 r50 into r75;
    ternary r75 r72 r50 into r76;
    sub r74 r76 into r77;
    lte r77 1u128 into r78;
    ternary r78 true false into r79;
    mul r72 r72 into r80;
    mul r6 2u128 into r81;
    div r80 r81 into r82;
    mul r82 r72 into r83;
    mul r7 2u128 into r84;
    div r83 r84 into r85;
    mul r13 r11 into r86;
    mul r85 2u128 into r87;
    add r86 r87 into r88;
    mul r88 r72 into r89;
    sub r13 1u128 into r90;
    mul r90 r72 into r91;
    mul 3u128 r85 into r92;
    add r91 r92 into r93;
    div r89 r93 into r94;
    gt r94 r72 into r95;
    ternary r95 r94 r72 into r96;
    lt r94 r72 into r97;
    ternary r97 r94 r72 into r98;
    sub r96 r98 into r99;
    lte r99 1u128 into r100;
    ternary r100 true false into r101;
    mul r94 r94 into r102;
    mul r6 2u128 into r103;
    div r102 r103 into r104;
    mul r104 r94 into r105;
    mul r7 2u128 into r106;
    div r105 r106 into r107;
    mul r13 r11 into r108;
    mul r107 2u128 into r109;
    add r108 r109 into r110;
    mul r110 r94 into r111;
    sub r13 1u128 into r112;
    mul r112 r94 into r113;
    mul 3u128 r107 into r114;
    add r113 r114 into r115;
    div r111 r115 into r116;
    gt r116 r94 into r117;
    ternary r117 r116 r94 into r118;
    lt r116 r94 into r119;
    ternary r119 r116 r94 into r120;
    sub r118 r120 into r121;
    lte r121 1u128 into r122;
    ternary r122 true false into r123;
    mul r116 r116 into r124;
    mul r6 2u128 into r125;
    div r124 r125 into r126;
    mul r126 r116 into r127;
    mul r7 2u128 into r128;
    div r127 r128 into r129;
    mul r13 r11 into r130;
    mul r129 2u128 into r131;
    add r130 r131 into r132;
    mul r132 r116 into r133;
    sub r13 1u128 into r134;
    mul r134 r116 into r135;
    mul 3u128 r129 into r136;
    add r135 r136 into r137;
    div r133 r137 into r138;
    gt r138 r116 into r139;
    ternary r139 r138 r116 into r140;
    lt r138 r116 into r141;
    ternary r141 r138 r116 into r142;
    sub r140 r142 into r143;
    lte r143 1u128 into r144;
    ternary r144 true false into r145;
    mul r138 r138 into r146;
    mul r6 2u128 into r147;
    div r146 r147 into r148;
    mul r148 r138 into r149;
    mul r7 2u128 into r150;
    div r149 r150 into r151;
    mul r13 r11 into r152;
    mul r151 2u128 into r153;
    add r152 r153 into r154;
    mul r154 r138 into r155;
    sub r13 1u128 into r156;
    mul r156 r138 into r157;
    mul 3u128 r151 into r158;
    add r157 r158 into r159;
    div r155 r159 into r160;
    gt r160 r138 into r161;
    ternary r161 r160 r138 into r162;
    lt r160 r138 into r163;
    ternary r163 r160 r138 into r164;
    sub r162 r164 into r165;
    lte r165 1u128 into r166;
    ternary r166 true false into r167;
    mul r160 r160 into r168;
    mul r6 2u128 into r169;
    div r168 r169 into r170;
    mul r170 r160 into r171;
    mul r7 2u128 into r172;
    div r171 r172 into r173;
    mul r13 r11 into r174;
    mul r173 2u128 into r175;
    add r174 r175 into r176;
    mul r176 r160 into r177;
    sub r13 1u128 into r178;
    mul r178 r160 into r179;
    mul 3u128 r173 into r180;
    add r179 r180 into r181;
    div r177 r181 into r182;
    gt r182 r160 into r183;
    ternary r183 r182 r160 into r184;
    lt r182 r160 into r185;
    ternary r185 r182 r160 into r186;
    sub r184 r186 into r187;
    lte r187 1u128 into r188;
    ternary r188 true false into r189;
    ternary r189 r182 r182 into r190;
    ternary r167 r160 r190 into r191;
    ternary r145 r138 r191 into r192;
    ternary r123 r116 r192 into r193;
    ternary r101 r94 r193 into r194;
    ternary r79 r72 r194 into r195;
    ternary r57 r50 r195 into r196;
    ternary r35 r28 r196 into r197;
    ternary r12 0u128 r197 into r198;
    add r6 r2 into r199;
    add r7 r4 into r200;
    add r199 r200 into r201;
    is.eq r201 0u128 into r202;
    mul r8 2u128 into r203;
    mul r201 r201 into r204;
    mul r199 2u128 into r205;
    div r204 r205 into r206;
    mul r206 r201 into r207;
    mul r200 2u128 into r208;
    div r207 r208 into r209;
    mul r203 r201 into r210;
    mul r209 2u128 into r211;
    add r210 r211 into r212;
    mul r212 r201 into r213;
    sub r203 1u128 into r214;
    mul r214 r201 into r215;
    mul 3u128 r209 into r216;
    add r215 r216 into r217;
    div r213 r217 into r218;
    gt r218 r201 into r219;
    ternary r219 r218 r201 into r220;
    lt r218 r201 into r221;
    ternary r221 r218 r201 into r222;
    sub r220 r222 into r223;
    lte r223 1u128 into r224;
    ternary r224 true false into r225;
    mul r218 r218 into r226;
    mul r199 2u128 into r227;
    div r226 r227 into r228;
    mul r228 r218 into r229;
    mul r200 2u128 into r230;
    div r229 r230 into r231;
    mul r203 r201 into r232;
    mul r231 2u128 into r233;
    add r232 r233 into r234;
    mul r234 r218 into r235;
    sub r203 1u128 into r236;
    mul r236 r218 into r237;
    mul 3u128 r231 into r238;
    add r237 r238 into r239;
    div r235 r239 into r240;
    gt r240 r218 into r241;
    ternary r241 r240 r218 into r242;
    lt r240 r218 into r243;
    ternary r243 r240 r218 into r244;
    sub r242 r244 into r245;
    lte r245 1u128 into r246;
    ternary r246 true false into r247;
    mul r240 r240 into r248;
    mul r199 2u128 into r249;
    div r248 r249 into r250;
    mul r250 r240 into r251;
    mul r200 2u128 into r252;
    div r251 r252 into r253;
    mul r203 r201 into r254;
    mul r253 2u128 into r255;
    add r254 r255 into r256;
    mul r256 r240 into r257;
    sub r203 1u128 into r258;
    mul r258 r240 into r259;
    mul 3u128 r253 into r260;
    add r259 r260 into r261;
    div r257 r261 into r262;
    gt r262 r240 into r263;
    ternary r263 r262 r240 into r264;
    lt r262 r240 into r265;
    ternary r265 r262 r240 into r266;
    sub r264 r266 into r267;
    lte r267 1u128 into r268;
    ternary r268 true false into r269;
    mul r262 r262 into r270;
    mul r199 2u128 into r271;
    div r270 r271 into r272;
    mul r272 r262 into r273;
    mul r200 2u128 into r274;
    div r273 r274 into r275;
    mul r203 r201 into r276;
    mul r275 2u128 into r277;
    add r276 r277 into r278;
    mul r278 r262 into r279;
    sub r203 1u128 into r280;
    mul r280 r262 into r281;
    mul 3u128 r275 into r282;
    add r281 r282 into r283;
    div r279 r283 into r284;
    gt r284 r262 into r285;
    ternary r285 r284 r262 into r286;
    lt r284 r262 into r287;
    ternary r287 r284 r262 into r288;
    sub r286 r288 into r289;
    lte r289 1u128 into r290;
    ternary r290 true false into r291;
    mul r284 r284 into r292;
    mul r199 2u128 into r293;
    div r292 r293 into r294;
    mul r294 r284 into r295;
    mul r200 2u128 into r296;
    div r295 r296 into r297;
    mul r203 r201 into r298;
    mul r297 2u128 into r299;
    add r298 r299 into r300;
    mul r300 r284 into r301;
    sub r203 1u128 into r302;
    mul r302 r284 into r303;
    mul 3u128 r297 into r304;
    add r303 r304 into r305;
    div r301 r305 into r306;
    gt r306 r284 into r307;
    ternary r307 r306 r284 into r308;
    lt r306 r284 into r309;
    ternary r309 r306 r284 into r310;
    sub r308 r310 into r311;
    lte r311 1u128 into r312;
    ternary r312 true false into r313;
    mul r306 r306 into r314;
    mul r199 2u128 into r315;
    div r314 r315 into r316;
    mul r316 r306 into r317;
    mul r200 2u128 into r318;
    div r317 r318 into r319;
    mul r203 r201 into r320;
    mul r319 2u128 into r321;
    add r320 r321 into r322;
    mul r322 r306 into r323;
    sub r203 1u128 into r324;
    mul r324 r306 into r325;
    mul 3u128 r319 into r326;
    add r325 r326 into r327;
    div r323 r327 into r328;
    gt r328 r306 into r329;
    ternary r329 r328 r306 into r330;
    lt r328 r306 into r331;
    ternary r331 r328 r306 into r332;
    sub r330 r332 into r333;
    lte r333 1u128 into r334;
    ternary r334 true false into r335;
    mul r328 r328 into r336;
    mul r199 2u128 into r337;
    div r336 r337 into r338;
    mul r338 r328 into r339;
    mul r200 2u128 into r340;
    div r339 r340 into r341;
    mul r203 r201 into r342;
    mul r341 2u128 into r343;
    add r342 r343 into r344;
    mul r344 r328 into r345;
    sub r203 1u128 into r346;
    mul r346 r328 into r347;
    mul 3u128 r341 into r348;
    add r347 r348 into r349;
    div r345 r349 into r350;
    gt r350 r328 into r351;
    ternary r351 r350 r328 into r352;
    lt r350 r328 into r353;
    ternary r353 r350 r328 into r354;
    sub r352 r354 into r355;
    lte r355 1u128 into r356;
    ternary r356 true false into r357;
    mul r350 r350 into r358;
    mul r199 2u128 into r359;
    div r358 r359 into r360;
    mul r360 r350 into r361;
    mul r200 2u128 into r362;
    div r361 r362 into r363;
    mul r203 r201 into r364;
    mul r363 2u128 into r365;
    add r364 r365 into r366;
    mul r366 r350 into r367;
    sub r203 1u128 into r368;
    mul r368 r350 into r369;
    mul 3u128 r363 into r370;
    add r369 r370 into r371;
    div r367 r371 into r372;
    gt r372 r350 into r373;
    ternary r373 r372 r350 into r374;
    lt r372 r350 into r375;
    ternary r375 r372 r350 into r376;
    sub r374 r376 into r377;
    lte r377 1u128 into r378;
    ternary r378 true false into r379;
    ternary r379 r372 r372 into r380;
    ternary r357 r350 r380 into r381;
    ternary r335 r328 r381 into r382;
    ternary r313 r306 r382 into r383;
    ternary r291 r284 r383 into r384;
    ternary r269 r262 r384 into r385;
    ternary r247 r240 r385 into r386;
    ternary r225 r218 r386 into r387;
    ternary r202 0u128 r387 into r388;
    gt r388 r198 into r389;
    assert.eq r389 true;
    cast r1.owner r9 r1.token_id into r390 as Token.record;
    cast r3.owner r10 r3.token_id into r391 as Token.record;
    cast r0 r1.token_id r3.token_id r5 into r392 as LpTokenReceipt.record;
    async add_liquidity r5 r1.token_id r2 r3.token_id r4 into r393;
    output r390 as Token.record;
    output r391 as Token.record;
    output r392 as LpTokenReceipt.record;
    output r393 as stableswap.aleo/add_liquidity.future;

finalize add_liquidity:
    input r0 as field.public;
    input r1 as u64.public;
    input r2 as u128.public;
    input r3 as u64.public;
    input r4 as u128.public;
    gt r1 r3 into r5;
    ternary r5 r3 r1 into r6;
    lte r1 r3 into r7;
    ternary r7 r3 r1 into r8;
    cast r6 r8 into r9 as PoolKey;
    hash.bhp256 r9 into r10 as field;
    get amm_pools[r10] into r11;
    mul r2 r11.lp_total_supply into r12;
    div r12 r11.reserve1 into r13;
    mul r4 r11.lp_total_supply into r14;
    div r14 r11.reserve2 into r15;
    lt r13 r15 into r16;
    ternary r16 r13 r15 into r17;
    add r11.reserve1 r2 into r18;
    add r11.reserve2 r4 into r19;
    add r11.lp_total_supply r17 into r20;
    cast r11.id r11.token1_id r11.token2_id r18 r19 r11.ampl_coef r20 r11.swap_fee into r21 as PoolInfo;
    set r21 into amm_pools[r10];
    contains amm_deposits[r0] into r22;
    not r22 into r23;
    assert.eq r23 true;
    set r17 into amm_deposits[r0];


function remove_liquidity:
    input r0 as address.private;
    input r1 as LpTokenReceipt.record;
    input r2 as u128.private;
    input r3 as u128.private;
    cast r0 r2 r1.token1_id into r4 as Token.record;
    cast r0 r3 r1.token2_id into r5 as Token.record;
    async remove_liquidity r1.deposit_id r1.token1_id r1.token2_id r2 r3 into r6;
    output r4 as Token.record;
    output r5 as Token.record;
    output r6 as stableswap.aleo/remove_liquidity.future;

finalize remove_liquidity:
    input r0 as field.public;
    input r1 as u64.public;
    input r2 as u64.public;
    input r3 as u128.public;
    input r4 as u128.public;
    gt r1 r2 into r5;
    ternary r5 r2 r1 into r6;
    lte r1 r2 into r7;
    ternary r7 r2 r1 into r8;
    cast r6 r8 into r9 as PoolKey;
    hash.bhp256 r9 into r10 as field;
    get amm_pools[r10] into r11;
    get amm_deposits[r0] into r12;
    mul r12 r11.reserve1 into r13;
    div r13 r11.lp_total_supply into r14;
    mul r12 r11.reserve2 into r15;
    div r15 r11.lp_total_supply into r16;
    sub r14 r3 into r17;
    sub r16 r4 into r18;
    sub r11.reserve1 r14 into r19;
    sub r11.reserve2 r16 into r20;
    sub r11.lp_total_supply r12 into r21;
    cast r11.id r11.token1_id r11.token2_id r19 r20 r11.ampl_coef r21 r11.swap_fee into r22 as PoolInfo;
    set r22 into amm_pools[r10];
    remove amm_deposits[r0];


function exchange:
    input r0 as address.private;
    input r1 as Token.record;
    input r2 as u64.private;
    input r3 as u64.private;
    input r4 as u128.private;
    input r5 as u128.private;
    input r6 as u128.private;
    input r7 as u128.private;
    input r8 as u64.private;
    input r9 as u64.private;
    input r10 as u128.private;
    input r11 as u128.private;
    gt r4 0u128 into r12;
    assert.eq r12 true;
    sub r1.amount r4 into r13;
    is.eq r8 r2 into r14;
    ternary r14 r6 r7 into r15;
    is.eq r9 r2 into r16;
    ternary r16 r6 r7 into r17;
    cast r1.owner r13 r1.token_id into r18 as Token.record;
    async exchange r15 r17 r2 r3 r4 r5 into r19;
    output r18 as Token.record;
    output r19 as stableswap.aleo/exchange.future;

finalize exchange:
    input r0 as u128.public;
    input r1 as u128.public;
    input r2 as u64.public;
    input r3 as u64.public;
    input r4 as u128.public;
    input r5 as u128.public;
    gt r2 r3 into r6;
    ternary r6 r3 r2 into r7;
    lte r2 r3 into r8;
    ternary r8 r3 r2 into r9;
    cast r7 r9 into r10 as PoolKey;
    hash.bhp256 r10 into r11 as field;
    get amm_pools[r11] into r12;
    is.eq r12.token1_id r2 into r13;
    ternary r13 r12.reserve1 r12.reserve2 into r14;
    is.eq r12.token2_id r2 into r15;
    ternary r15 r12.reserve1 r12.reserve2 into r16;
    add r4 r14 into r17;
    is.neq r12.token1_id r12.token2_id into r18;
    is.neq r12.token1_id 0u64 into r19;
    and r18 r19 into r20;
    is.neq r12.token2_id 0u64 into r21;
    and r20 r21 into r22;
    assert.eq r22 true;
    add r14 r16 into r23;
    is.eq r23 0u128 into r24;
    mul r12.ampl_coef 2u128 into r25;
    mul r23 r23 into r26;
    mul r14 2u128 into r27;
    div r26 r27 into r28;
    mul r28 r23 into r29;
    mul r16 2u128 into r30;
    div r29 r30 into r31;
    mul r25 r23 into r32;
    mul r31 2u128 into r33;
    add r32 r33 into r34;
    mul r34 r23 into r35;
    sub r25 1u128 into r36;
    mul r36 r23 into r37;
    mul 3u128 r31 into r38;
    add r37 r38 into r39;
    div r35 r39 into r40;
    gt r40 r23 into r41;
    ternary r41 r40 r23 into r42;
    lt r40 r23 into r43;
    ternary r43 r40 r23 into r44;
    sub r42 r44 into r45;
    lte r45 1u128 into r46;
    ternary r46 true false into r47;
    mul r40 r40 into r48;
    mul r14 2u128 into r49;
    div r48 r49 into r50;
    mul r50 r40 into r51;
    mul r16 2u128 into r52;
    div r51 r52 into r53;
    mul r25 r23 into r54;
    mul r53 2u128 into r55;
    add r54 r55 into r56;
    mul r56 r40 into r57;
    sub r25 1u128 into r58;
    mul r58 r40 into r59;
    mul 3u128 r53 into r60;
    add r59 r60 into r61;
    div r57 r61 into r62;
    gt r62 r40 into r63;
    ternary r63 r62 r40 into r64;
    lt r62 r40 into r65;
    ternary r65 r62 r40 into r66;
    sub r64 r66 into r67;
    lte r67 1u128 into r68;
    ternary r68 true false into r69;
    mul r62 r62 into r70;
    mul r14 2u128 into r71;
    div r70 r71 into r72;
    mul r72 r62 into r73;
    mul r16 2u128 into r74;
    div r73 r74 into r75;
    mul r25 r23 into r76;
    mul r75 2u128 into r77;
    add r76 r77 into r78;
    mul r78 r62 into r79;
    sub r25 1u128 into r80;
    mul r80 r62 into r81;
    mul 3u128 r75 into r82;
    add r81 r82 into r83;
    div r79 r83 into r84;
    gt r84 r62 into r85;
    ternary r85 r84 r62 into r86;
    lt r84 r62 into r87;
    ternary r87 r84 r62 into r88;
    sub r86 r88 into r89;
    lte r89 1u128 into r90;
    ternary r90 true false into r91;
    mul r84 r84 into r92;
    mul r14 2u128 into r93;
    div r92 r93 into r94;
    mul r94 r84 into r95;
    mul r16 2u128 into r96;
    div r95 r96 into r97;
    mul r25 r23 into r98;
    mul r97 2u128 into r99;
    add r98 r99 into r100;
    mul r100 r84 into r101;
    sub r25 1u128 into r102;
    mul r102 r84 into r103;
    mul 3u128 r97 into r104;
    add r103 r104 into r105;
    div r101 r105 into r106;
    gt r106 r84 into r107;
    ternary r107 r106 r84 into r108;
    lt r106 r84 into r109;
    ternary r109 r106 r84 into r110;
    sub r108 r110 into r111;
    lte r111 1u128 into r112;
    ternary r112 true false into r113;
    mul r106 r106 into r114;
    mul r14 2u128 into r115;
    div r114 r115 into r116;
    mul r116 r106 into r117;
    mul r16 2u128 into r118;
    div r117 r118 into r119;
    mul r25 r23 into r120;
    mul r119 2u128 into r121;
    add r120 r121 into r122;
    mul r122 r106 into r123;
    sub r25 1u128 into r124;
    mul r124 r106 into r125;
    mul 3u128 r119 into r126;
    add r125 r126 into r127;
    div r123 r127 into r128;
    gt r128 r106 into r129;
    ternary r129 r128 r106 into r130;
    lt r128 r106 into r131;
    ternary r131 r128 r106 into r132;
    sub r130 r132 into r133;
    lte r133 1u128 into r134;
    ternary r134 true false into r135;
    mul r128 r128 into r136;
    mul r14 2u128 into r137;
    div r136 r137 into r138;
    mul r138 r128 into r139;
    mul r16 2u128 into r140;
    div r139 r140 into r141;
    mul r25 r23 into r142;
    mul r141 2u128 into r143;
    add r142 r143 into r144;
    mul r144 r128 into r145;
    sub r25 1u128 into r146;
    mul r146 r128 into r147;
    mul 3u128 r141 into r148;
    add r147 r148 into r149;
    div r145 r149 into r150;
    gt r150 r128 into r151;
    ternary r151 r150 r128 into r152;
    lt r150 r128 into r153;
    ternary r153 r150 r128 into r154;
    sub r152 r154 into r155;
    lte r155 1u128 into r156;
    ternary r156 true false into r157;
    mul r150 r150 into r158;
    mul r14 2u128 into r159;
    div r158 r159 into r160;
    mul r160 r150 into r161;
    mul r16 2u128 into r162;
    div r161 r162 into r163;
    mul r25 r23 into r164;
    mul r163 2u128 into r165;
    add r164 r165 into r166;
    mul r166 r150 into r167;
    sub r25 1u128 into r168;
    mul r168 r150 into r169;
    mul 3u128 r163 into r170;
    add r169 r170 into r171;
    div r167 r171 into r172;
    gt r172 r150 into r173;
    ternary r173 r172 r150 into r174;
    lt r172 r150 into r175;
    ternary r175 r172 r150 into r176;
    sub r174 r176 into r177;
    lte r177 1u128 into r178;
    ternary r178 true false into r179;
    mul r172 r172 into r180;
    mul r14 2u128 into r181;
    div r180 r181 into r182;
    mul r182 r172 into r183;
    mul r16 2u128 into r184;
    div r183 r184 into r185;
    mul r25 r23 into r186;
    mul r185 2u128 into r187;
    add r186 r187 into r188;
    mul r188 r172 into r189;
    sub r25 1u128 into r190;
    mul r190 r172 into r191;
    mul 3u128 r185 into r192;
    add r191 r192 into r193;
    div r189 r193 into r194;
    gt r194 r172 into r195;
    ternary r195 r194 r172 into r196;
    lt r194 r172 into r197;
    ternary r197 r194 r172 into r198;
    sub r196 r198 into r199;
    lte r199 1u128 into r200;
    ternary r200 true false into r201;
    ternary r201 r194 r194 into r202;
    ternary r179 r172 r202 into r203;
    ternary r157 r150 r203 into r204;
    ternary r135 r128 r204 into r205;
    ternary r113 r106 r205 into r206;
    ternary r91 r84 r206 into r207;
    ternary r69 r62 r207 into r208;
    ternary r47 r40 r208 into r209;
    ternary r24 0u128 r209 into r210;
    mul r12.ampl_coef 2u128 into r211;
    mul r210 r210 into r212;
    mul r17 2u128 into r213;
    div r212 r213 into r214;
    mul r214 r210 into r215;
    mul r211 2u128 into r216;
    div r215 r216 into r217;
    div r210 r211 into r218;
    add r17 r218 into r219;
    mul r210 r210 into r220;
    add r220 r217 into r221;
    mul 2u128 r210 into r222;
    add r222 r219 into r223;
    sub r223 r210 into r224;
    div r221 r224 into r225;
    gt r225 r210 into r226;
    ternary r226 r225 r210 into r227;
    lt r225 r210 into r228;
    ternary r228 r225 r210 into r229;
    sub r227 r229 into r230;
    lte r230 1u128 into r231;
    ternary r231 true false into r232;
    mul r225 r225 into r233;
    add r233 r217 into r234;
    mul 2u128 r225 into r235;
    add r235 r219 into r236;
    sub r236 r210 into r237;
    div r234 r237 into r238;
    gt r238 r225 into r239;
    ternary r239 r238 r225 into r240;
    lt r238 r225 into r241;
    ternary r241 r238 r225 into r242;
    sub r240 r242 into r243;
    lte r243 1u128 into r244;
    ternary r244 true false into r245;
    mul r238 r238 into r246;
    add r246 r217 into r247;
    mul 2u128 r238 into r248;
    add r248 r219 into r249;
    sub r249 r210 into r250;
    div r247 r250 into r251;
    gt r251 r238 into r252;
    ternary r252 r251 r238 into r253;
    lt r251 r238 into r254;
    ternary r254 r251 r238 into r255;
    sub r253 r255 into r256;
    lte r256 1u128 into r257;
    ternary r257 true false into r258;
    mul r251 r251 into r259;
    add r259 r217 into r260;
    mul 2u128 r251 into r261;
    add r261 r219 into r262;
    sub r262 r210 into r263;
    div r260 r263 into r264;
    gt r264 r251 into r265;
    ternary r265 r264 r251 into r266;
    lt r264 r251 into r267;
    ternary r267 r264 r251 into r268;
    sub r266 r268 into r269;
    lte r269 1u128 into r270;
    ternary r270 true false into r271;
    mul r264 r264 into r272;
    add r272 r217 into r273;
    mul 2u128 r264 into r274;
    add r274 r219 into r275;
    sub r275 r210 into r276;
    div r273 r276 into r277;
    gt r277 r264 into r278;
    ternary r278 r277 r264 into r279;
    lt r277 r264 into r280;
    ternary r280 r277 r264 into r281;
    sub r279 r281 into r282;
    lte r282 1u128 into r283;
    ternary r283 true false into r284;
    mul r277 r277 into r285;
    add r285 r217 into r286;
    mul 2u128 r277 into r287;
    add r287 r219 into r288;
    sub r288 r210 into r289;
    div r286 r289 into r290;
    gt r290 r277 into r291;
    ternary r291 r290 r277 into r292;
    lt r290 r277 into r293;
    ternary r293 r290 r277 into r294;
    sub r292 r294 into r295;
    lte r295 1u128 into r296;
    ternary r296 true false into r297;
    mul r290 r290 into r298;
    add r298 r217 into r299;
    mul 2u128 r290 into r300;
    add r300 r219 into r301;
    sub r301 r210 into r302;
    div r299 r302 into r303;
    gt r303 r290 into r304;
    ternary r304 r303 r290 into r305;
    lt r303 r290 into r306;
    ternary r306 r303 r290 into r307;
    sub r305 r307 into r308;
    lte r308 1u128 into r309;
    ternary r309 true false into r310;
    mul r303 r303 into r311;
    add r311 r217 into r312;
    mul 2u128 r303 into r313;
    add r313 r219 into r314;
    sub r314 r210 into r315;
    div r312 r315 into r316;
    gt r316 r303 into r317;
    ternary r317 r316 r303 into r318;
    lt r316 r303 into r319;
    ternary r319 r316 r303 into r320;
    sub r318 r320 into r321;
    lte r321 1u128 into r322;
    ternary r322 true false into r323;
    ternary r323 r316 r316 into r324;
    ternary r310 r303 r324 into r325;
    ternary r297 r290 r325 into r326;
    ternary r284 r277 r326 into r327;
    ternary r271 r264 r327 into r328;
    ternary r258 r251 r328 into r329;
    ternary r245 r238 r329 into r330;
    ternary r232 r225 r330 into r331;
    sub r16 r331 into r332;
    sub r332 1u128 into r333;
    gte r333 r5 into r334;
    assert.eq r334 true;
    gt r0 r14 into r335;
    ternary r335 r0 r14 into r336;
    lt r0 r14 into r337;
    ternary r337 r0 r14 into r338;
    sub r336 r338 into r339;
    lt r339 10u128 into r340;
    assert.eq r340 true;
    gt r1 r16 into r341;
    ternary r341 r1 r16 into r342;
    lt r1 r16 into r343;
    ternary r343 r1 r16 into r344;
    sub r342 r344 into r345;
    lt r345 10u128 into r346;
    assert.eq r346 true;
    add r14 r4 into r347;
    sub r16 r333 into r348;
    is.eq r12.token1_id r2 into r349;
    ternary r349 r347 r348 into r350;
    is.eq r12.token2_id r2 into r351;
    ternary r351 r347 r348 into r352;
    cast r12.id r12.token1_id r12.token2_id r350 r352 r12.ampl_coef r12.lp_total_supply r12.swap_fee into r353 as PoolInfo;
    set r353 into amm_pools[r11];


function main:
    input r0 as u32.private;
    gt 5u32 3u32 into r1;
    gt 3u32 4u32 into r2;
    and r1 r2 into r3;
    gt 3u32 1u32 into r4;
    gt 1u32 5u32 into r5;
    and r4 r5 into r6;
    ternary r6 1u32 1u32 into r7;
    ternary r3 3u32 r7 into r8;
    gt 1u128 2u128 into r9;
    gt 2u128 3u128 into r10;
    and r9 r10 into r11;
    gt 2u128 1u128 into r12;
    gt 1u128 3u128 into r13;
    and r12 r13 into r14;
    ternary r14 1u128 3u128 into r15;
    ternary r11 2u128 r15 into r16;
    output r16 as u128.private;
