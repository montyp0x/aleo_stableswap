import arcanetoken.aleo;
import credits.aleo;
program stableswap2.aleo;





struct PoolKey:
    token1 as u64;
    token2 as u64;

record PoolAdmin:
    owner as address.private;
    pool_key as field.private;

struct PoolInfo:
    id as field;
    token1_id as u64;
    token2_id as u64;
    reserve1 as u128;
    reserve2 as u128;
    ampl_coef as u128;
    lp_total_supply as u128;
    swap_fee as u128;

struct DepositKey:
    holder as address;
    pool_key as field;
    deposit_id as field;

record LpTokenReceipt:
    owner as address.private;
    token1_id as u64.private;
    token2_id as u64.private;
    deposit_id as field.private;


mapping amm_pools:
	key as field.public;
	value as PoolInfo.public;


mapping amm_deposits:
	key as field.public;
	value as u128.public;















function create_pool:
    input r0 as address.private;
    input r1 as arcanetoken.aleo/ArcaneToken.record;
    input r2 as u128.private;
    input r3 as arcanetoken.aleo/ArcaneToken.record;
    input r4 as u128.private;
    input r5 as u128.private;
    input r6 as u128.private;
    gt r2 0u128 into r7;
    gt r4 0u128 into r8;
    and r7 r8 into r9;
    assert.eq r9 true;
    lte r6 10000u128 into r10;
    assert.eq r10 true;
    gt r1.token_id r3.token_id into r11;
    assert.eq r11 true;
    gte r1.amount r2 into r12;
    gte r3.amount r4 into r13;
    and r12 r13 into r14;
    assert.eq r14 true;
    call arcanetoken.aleo/transfer_private_to_public_arc r1 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r2 into r15 r16;
    call arcanetoken.aleo/transfer_private_to_public_arc r3 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r4 into r17 r18;
    gt r1.token_id r3.token_id into r19;
    ternary r19 r3.token_id r1.token_id into r20;
    lte r1.token_id r3.token_id into r21;
    ternary r21 r3.token_id r1.token_id into r22;
    cast r20 r22 into r23 as PoolKey;
    hash.bhp256 r23 into r24 as field;
    cast r0 r24 into r25 as PoolAdmin.record;
    async create_pool r16 r18 r24 r1.token_id r2 r3.token_id r4 r5 r6 into r26;
    output r25 as PoolAdmin.record;
    output r15 as arcanetoken.aleo/ArcaneToken.record;
    output r17 as arcanetoken.aleo/ArcaneToken.record;
    output r26 as stableswap2.aleo/create_pool.future;

finalize create_pool:
    input r0 as arcanetoken.aleo/transfer_private_to_public_arc.future;
    input r1 as arcanetoken.aleo/transfer_private_to_public_arc.future;
    input r2 as field.public;
    input r3 as u64.public;
    input r4 as u128.public;
    input r5 as u64.public;
    input r6 as u128.public;
    input r7 as u128.public;
    input r8 as u128.public;
    await r0;
    await r1;
    contains amm_pools[r2] into r9;
    not r9 into r10;
    assert.eq r10 true;
    mul r4 r6 into r11;
    cast r2 r3 r5 r4 r6 r7 r11 r8 into r12 as PoolInfo;
    set r12 into amm_pools[r2];


function transfer_pool_ownership:
    input r0 as PoolAdmin.record;
    input r1 as address.private;
    is.eq r0.owner self.caller into r2;
    assert.eq r2 true;
    cast r1 r0.pool_key into r3 as PoolAdmin.record;
    output r3 as PoolAdmin.record;


function add_liquidity:
    input r0 as address.private;
    input r1 as arcanetoken.aleo/ArcaneToken.record;
    input r2 as u128.private;
    input r3 as arcanetoken.aleo/ArcaneToken.record;
    input r4 as u128.private;
    input r5 as field.private;
    input r6 as u128.private;
    input r7 as u128.private;
    input r8 as u128.private;
    sub r1.amount r2 into r9;
    sub r3.amount r4 into r10;
    add r6 r7 into r11;
    is.eq r11 0u128 into r12;
    mul r8 2u128 into r13;
    mul r11 r11 into r14;
    mul r6 2u128 into r15;
    div r14 r15 into r16;
    mul r16 r11 into r17;
    mul r7 2u128 into r18;
    div r17 r18 into r19;
    mul r13 r11 into r20;
    mul r19 2u128 into r21;
    add r20 r21 into r22;
    mul r22 r11 into r23;
    sub r13 1u128 into r24;
    mul r24 r11 into r25;
    mul 3u128 r19 into r26;
    add r25 r26 into r27;
    div r23 r27 into r28;
    gt r28 r11 into r29;
    ternary r29 r28 r11 into r30;
    lt r28 r11 into r31;
    ternary r31 r28 r11 into r32;
    sub r30 r32 into r33;
    lte r33 1u128 into r34;
    ternary r34 true false into r35;
    mul r28 r28 into r36;
    mul r6 2u128 into r37;
    div r36 r37 into r38;
    mul r38 r28 into r39;
    mul r7 2u128 into r40;
    div r39 r40 into r41;
    mul r13 r11 into r42;
    mul r41 2u128 into r43;
    add r42 r43 into r44;
    mul r44 r28 into r45;
    sub r13 1u128 into r46;
    mul r46 r28 into r47;
    mul 3u128 r41 into r48;
    add r47 r48 into r49;
    div r45 r49 into r50;
    gt r50 r28 into r51;
    ternary r51 r50 r28 into r52;
    lt r50 r28 into r53;
    ternary r53 r50 r28 into r54;
    sub r52 r54 into r55;
    lte r55 1u128 into r56;
    ternary r56 true false into r57;
    mul r50 r50 into r58;
    mul r6 2u128 into r59;
    div r58 r59 into r60;
    mul r60 r50 into r61;
    mul r7 2u128 into r62;
    div r61 r62 into r63;
    mul r13 r11 into r64;
    mul r63 2u128 into r65;
    add r64 r65 into r66;
    mul r66 r50 into r67;
    sub r13 1u128 into r68;
    mul r68 r50 into r69;
    mul 3u128 r63 into r70;
    add r69 r70 into r71;
    div r67 r71 into r72;
    gt r72 r50 into r73;
    ternary r73 r72 r50 into r74;
    lt r72 r50 into r75;
    ternary r75 r72 r50 into r76;
    sub r74 r76 into r77;
    lte r77 1u128 into r78;
    ternary r78 true false into r79;
    mul r72 r72 into r80;
    mul r6 2u128 into r81;
    div r80 r81 into r82;
    mul r82 r72 into r83;
    mul r7 2u128 into r84;
    div r83 r84 into r85;
    mul r13 r11 into r86;
    mul r85 2u128 into r87;
    add r86 r87 into r88;
    mul r88 r72 into r89;
    sub r13 1u128 into r90;
    mul r90 r72 into r91;
    mul 3u128 r85 into r92;
    add r91 r92 into r93;
    div r89 r93 into r94;
    gt r94 r72 into r95;
    ternary r95 r94 r72 into r96;
    lt r94 r72 into r97;
    ternary r97 r94 r72 into r98;
    sub r96 r98 into r99;
    lte r99 1u128 into r100;
    ternary r100 true false into r101;
    mul r94 r94 into r102;
    mul r6 2u128 into r103;
    div r102 r103 into r104;
    mul r104 r94 into r105;
    mul r7 2u128 into r106;
    div r105 r106 into r107;
    mul r13 r11 into r108;
    mul r107 2u128 into r109;
    add r108 r109 into r110;
    mul r110 r94 into r111;
    sub r13 1u128 into r112;
    mul r112 r94 into r113;
    mul 3u128 r107 into r114;
    add r113 r114 into r115;
    div r111 r115 into r116;
    gt r116 r94 into r117;
    ternary r117 r116 r94 into r118;
    lt r116 r94 into r119;
    ternary r119 r116 r94 into r120;
    sub r118 r120 into r121;
    lte r121 1u128 into r122;
    ternary r122 true false into r123;
    mul r116 r116 into r124;
    mul r6 2u128 into r125;
    div r124 r125 into r126;
    mul r126 r116 into r127;
    mul r7 2u128 into r128;
    div r127 r128 into r129;
    mul r13 r11 into r130;
    mul r129 2u128 into r131;
    add r130 r131 into r132;
    mul r132 r116 into r133;
    sub r13 1u128 into r134;
    mul r134 r116 into r135;
    mul 3u128 r129 into r136;
    add r135 r136 into r137;
    div r133 r137 into r138;
    gt r138 r116 into r139;
    ternary r139 r138 r116 into r140;
    lt r138 r116 into r141;
    ternary r141 r138 r116 into r142;
    sub r140 r142 into r143;
    lte r143 1u128 into r144;
    ternary r144 true false into r145;
    mul r138 r138 into r146;
    mul r6 2u128 into r147;
    div r146 r147 into r148;
    mul r148 r138 into r149;
    mul r7 2u128 into r150;
    div r149 r150 into r151;
    mul r13 r11 into r152;
    mul r151 2u128 into r153;
    add r152 r153 into r154;
    mul r154 r138 into r155;
    sub r13 1u128 into r156;
    mul r156 r138 into r157;
    mul 3u128 r151 into r158;
    add r157 r158 into r159;
    div r155 r159 into r160;
    gt r160 r138 into r161;
    ternary r161 r160 r138 into r162;
    lt r160 r138 into r163;
    ternary r163 r160 r138 into r164;
    sub r162 r164 into r165;
    lte r165 1u128 into r166;
    ternary r166 true false into r167;
    mul r160 r160 into r168;
    mul r6 2u128 into r169;
    div r168 r169 into r170;
    mul r170 r160 into r171;
    mul r7 2u128 into r172;
    div r171 r172 into r173;
    mul r13 r11 into r174;
    mul r173 2u128 into r175;
    add r174 r175 into r176;
    mul r176 r160 into r177;
    sub r13 1u128 into r178;
    mul r178 r160 into r179;
    mul 3u128 r173 into r180;
    add r179 r180 into r181;
    div r177 r181 into r182;
    gt r182 r160 into r183;
    ternary r183 r182 r160 into r184;
    lt r182 r160 into r185;
    ternary r185 r182 r160 into r186;
    sub r184 r186 into r187;
    lte r187 1u128 into r188;
    ternary r188 true false into r189;
    ternary r189 r182 r182 into r190;
    ternary r167 r160 r190 into r191;
    ternary r145 r138 r191 into r192;
    ternary r123 r116 r192 into r193;
    ternary r101 r94 r193 into r194;
    ternary r79 r72 r194 into r195;
    ternary r57 r50 r195 into r196;
    ternary r35 r28 r196 into r197;
    ternary r12 0u128 r197 into r198;
    add r6 r2 into r199;
    add r7 r4 into r200;
    add r199 r200 into r201;
    is.eq r201 0u128 into r202;
    mul r8 2u128 into r203;
    mul r201 r201 into r204;
    mul r199 2u128 into r205;
    div r204 r205 into r206;
    mul r206 r201 into r207;
    mul r200 2u128 into r208;
    div r207 r208 into r209;
    mul r203 r201 into r210;
    mul r209 2u128 into r211;
    add r210 r211 into r212;
    mul r212 r201 into r213;
    sub r203 1u128 into r214;
    mul r214 r201 into r215;
    mul 3u128 r209 into r216;
    add r215 r216 into r217;
    div r213 r217 into r218;
    gt r218 r201 into r219;
    ternary r219 r218 r201 into r220;
    lt r218 r201 into r221;
    ternary r221 r218 r201 into r222;
    sub r220 r222 into r223;
    lte r223 1u128 into r224;
    ternary r224 true false into r225;
    mul r218 r218 into r226;
    mul r199 2u128 into r227;
    div r226 r227 into r228;
    mul r228 r218 into r229;
    mul r200 2u128 into r230;
    div r229 r230 into r231;
    mul r203 r201 into r232;
    mul r231 2u128 into r233;
    add r232 r233 into r234;
    mul r234 r218 into r235;
    sub r203 1u128 into r236;
    mul r236 r218 into r237;
    mul 3u128 r231 into r238;
    add r237 r238 into r239;
    div r235 r239 into r240;
    gt r240 r218 into r241;
    ternary r241 r240 r218 into r242;
    lt r240 r218 into r243;
    ternary r243 r240 r218 into r244;
    sub r242 r244 into r245;
    lte r245 1u128 into r246;
    ternary r246 true false into r247;
    mul r240 r240 into r248;
    mul r199 2u128 into r249;
    div r248 r249 into r250;
    mul r250 r240 into r251;
    mul r200 2u128 into r252;
    div r251 r252 into r253;
    mul r203 r201 into r254;
    mul r253 2u128 into r255;
    add r254 r255 into r256;
    mul r256 r240 into r257;
    sub r203 1u128 into r258;
    mul r258 r240 into r259;
    mul 3u128 r253 into r260;
    add r259 r260 into r261;
    div r257 r261 into r262;
    gt r262 r240 into r263;
    ternary r263 r262 r240 into r264;
    lt r262 r240 into r265;
    ternary r265 r262 r240 into r266;
    sub r264 r266 into r267;
    lte r267 1u128 into r268;
    ternary r268 true false into r269;
    mul r262 r262 into r270;
    mul r199 2u128 into r271;
    div r270 r271 into r272;
    mul r272 r262 into r273;
    mul r200 2u128 into r274;
    div r273 r274 into r275;
    mul r203 r201 into r276;
    mul r275 2u128 into r277;
    add r276 r277 into r278;
    mul r278 r262 into r279;
    sub r203 1u128 into r280;
    mul r280 r262 into r281;
    mul 3u128 r275 into r282;
    add r281 r282 into r283;
    div r279 r283 into r284;
    gt r284 r262 into r285;
    ternary r285 r284 r262 into r286;
    lt r284 r262 into r287;
    ternary r287 r284 r262 into r288;
    sub r286 r288 into r289;
    lte r289 1u128 into r290;
    ternary r290 true false into r291;
    mul r284 r284 into r292;
    mul r199 2u128 into r293;
    div r292 r293 into r294;
    mul r294 r284 into r295;
    mul r200 2u128 into r296;
    div r295 r296 into r297;
    mul r203 r201 into r298;
    mul r297 2u128 into r299;
    add r298 r299 into r300;
    mul r300 r284 into r301;
    sub r203 1u128 into r302;
    mul r302 r284 into r303;
    mul 3u128 r297 into r304;
    add r303 r304 into r305;
    div r301 r305 into r306;
    gt r306 r284 into r307;
    ternary r307 r306 r284 into r308;
    lt r306 r284 into r309;
    ternary r309 r306 r284 into r310;
    sub r308 r310 into r311;
    lte r311 1u128 into r312;
    ternary r312 true false into r313;
    mul r306 r306 into r314;
    mul r199 2u128 into r315;
    div r314 r315 into r316;
    mul r316 r306 into r317;
    mul r200 2u128 into r318;
    div r317 r318 into r319;
    mul r203 r201 into r320;
    mul r319 2u128 into r321;
    add r320 r321 into r322;
    mul r322 r306 into r323;
    sub r203 1u128 into r324;
    mul r324 r306 into r325;
    mul 3u128 r319 into r326;
    add r325 r326 into r327;
    div r323 r327 into r328;
    gt r328 r306 into r329;
    ternary r329 r328 r306 into r330;
    lt r328 r306 into r331;
    ternary r331 r328 r306 into r332;
    sub r330 r332 into r333;
    lte r333 1u128 into r334;
    ternary r334 true false into r335;
    mul r328 r328 into r336;
    mul r199 2u128 into r337;
    div r336 r337 into r338;
    mul r338 r328 into r339;
    mul r200 2u128 into r340;
    div r339 r340 into r341;
    mul r203 r201 into r342;
    mul r341 2u128 into r343;
    add r342 r343 into r344;
    mul r344 r328 into r345;
    sub r203 1u128 into r346;
    mul r346 r328 into r347;
    mul 3u128 r341 into r348;
    add r347 r348 into r349;
    div r345 r349 into r350;
    gt r350 r328 into r351;
    ternary r351 r350 r328 into r352;
    lt r350 r328 into r353;
    ternary r353 r350 r328 into r354;
    sub r352 r354 into r355;
    lte r355 1u128 into r356;
    ternary r356 true false into r357;
    mul r350 r350 into r358;
    mul r199 2u128 into r359;
    div r358 r359 into r360;
    mul r360 r350 into r361;
    mul r200 2u128 into r362;
    div r361 r362 into r363;
    mul r203 r201 into r364;
    mul r363 2u128 into r365;
    add r364 r365 into r366;
    mul r366 r350 into r367;
    sub r203 1u128 into r368;
    mul r368 r350 into r369;
    mul 3u128 r363 into r370;
    add r369 r370 into r371;
    div r367 r371 into r372;
    gt r372 r350 into r373;
    ternary r373 r372 r350 into r374;
    lt r372 r350 into r375;
    ternary r375 r372 r350 into r376;
    sub r374 r376 into r377;
    lte r377 1u128 into r378;
    ternary r378 true false into r379;
    ternary r379 r372 r372 into r380;
    ternary r357 r350 r380 into r381;
    ternary r335 r328 r381 into r382;
    ternary r313 r306 r382 into r383;
    ternary r291 r284 r383 into r384;
    ternary r269 r262 r384 into r385;
    ternary r247 r240 r385 into r386;
    ternary r225 r218 r386 into r387;
    ternary r202 0u128 r387 into r388;
    gt r388 r198 into r389;
    assert.eq r389 true;
    call arcanetoken.aleo/transfer_private_to_public_arc r1 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r9 into r390 r391;
    call arcanetoken.aleo/transfer_private_to_public_arc r3 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r10 into r392 r393;
    cast r0 r1.token_id r3.token_id r5 into r394 as LpTokenReceipt.record;
    async add_liquidity r391 r393 r5 r1.token_id r2 r3.token_id r4 into r395;
    output r390 as arcanetoken.aleo/ArcaneToken.record;
    output r392 as arcanetoken.aleo/ArcaneToken.record;
    output r394 as LpTokenReceipt.record;
    output r395 as stableswap2.aleo/add_liquidity.future;

finalize add_liquidity:
    input r0 as arcanetoken.aleo/transfer_private_to_public_arc.future;
    input r1 as arcanetoken.aleo/transfer_private_to_public_arc.future;
    input r2 as field.public;
    input r3 as u64.public;
    input r4 as u128.public;
    input r5 as u64.public;
    input r6 as u128.public;
    await r0;
    await r1;
    gt r3 r5 into r7;
    ternary r7 r5 r3 into r8;
    lte r3 r5 into r9;
    ternary r9 r5 r3 into r10;
    cast r8 r10 into r11 as PoolKey;
    hash.bhp256 r11 into r12 as field;
    get amm_pools[r12] into r13;
    mul r4 r13.lp_total_supply into r14;
    div r14 r13.reserve1 into r15;
    mul r6 r13.lp_total_supply into r16;
    div r16 r13.reserve2 into r17;
    lt r15 r17 into r18;
    ternary r18 r15 r17 into r19;
    add r13.reserve1 r4 into r20;
    add r13.reserve2 r6 into r21;
    add r13.lp_total_supply r19 into r22;
    cast r13.id r13.token1_id r13.token2_id r20 r21 r13.ampl_coef r22 r13.swap_fee into r23 as PoolInfo;
    set r23 into amm_pools[r12];
    contains amm_deposits[r2] into r24;
    not r24 into r25;
    assert.eq r25 true;
    set r19 into amm_deposits[r2];


function remove_liquidity:
    input r0 as address.private;
    input r1 as LpTokenReceipt.record;
    input r2 as u128.private;
    input r3 as u128.private;
    call arcanetoken.aleo/transfer_public_to_private_arc r1.token1_id r0 r2 into r4 r5;
    call arcanetoken.aleo/transfer_public_to_private_arc r1.token2_id r0 r3 into r6 r7;
    async remove_liquidity r5 r7 r1.deposit_id r1.token1_id r1.token2_id r2 r3 into r8;
    output r4 as arcanetoken.aleo/ArcaneToken.record;
    output r6 as arcanetoken.aleo/ArcaneToken.record;
    output r8 as stableswap2.aleo/remove_liquidity.future;

finalize remove_liquidity:
    input r0 as arcanetoken.aleo/transfer_public_to_private_arc.future;
    input r1 as arcanetoken.aleo/transfer_public_to_private_arc.future;
    input r2 as field.public;
    input r3 as u64.public;
    input r4 as u64.public;
    input r5 as u128.public;
    input r6 as u128.public;
    await r0;
    await r1;
    gt r3 r4 into r7;
    ternary r7 r4 r3 into r8;
    lte r3 r4 into r9;
    ternary r9 r4 r3 into r10;
    cast r8 r10 into r11 as PoolKey;
    hash.bhp256 r11 into r12 as field;
    get amm_pools[r12] into r13;
    get amm_deposits[r2] into r14;
    mul r14 r13.reserve1 into r15;
    div r15 r13.lp_total_supply into r16;
    mul r14 r13.reserve2 into r17;
    div r17 r13.lp_total_supply into r18;
    sub r16 r5 into r19;
    sub r18 r6 into r20;
    sub r13.reserve1 r16 into r21;
    sub r13.reserve2 r18 into r22;
    sub r13.lp_total_supply r14 into r23;
    cast r13.id r13.token1_id r13.token2_id r21 r22 r13.ampl_coef r23 r13.swap_fee into r24 as PoolInfo;
    set r24 into amm_pools[r12];
    remove amm_deposits[r2];


function exchange:
    input r0 as address.private;
    input r1 as arcanetoken.aleo/ArcaneToken.record;
    input r2 as u64.private;
    input r3 as u64.private;
    input r4 as u128.private;
    input r5 as u128.private;
    input r6 as u128.private;
    input r7 as u128.private;
    input r8 as u64.private;
    input r9 as u64.private;
    input r10 as u128.private;
    input r11 as u128.private;
    gt r4 0u128 into r12;
    assert.eq r12 true;
    sub r1.amount r4 into r13;
    is.eq r8 r2 into r14;
    ternary r14 r6 r7 into r15;
    is.eq r9 r2 into r16;
    ternary r16 r6 r7 into r17;
    add r4 r15 into r18;
    is.neq r8 r9 into r19;
    is.neq r8 0u64 into r20;
    and r19 r20 into r21;
    is.neq r9 0u64 into r22;
    and r21 r22 into r23;
    assert.eq r23 true;
    add r6 r7 into r24;
    is.eq r24 0u128 into r25;
    mul r10 2u128 into r26;
    mul r24 r24 into r27;
    mul r6 2u128 into r28;
    div r27 r28 into r29;
    mul r29 r24 into r30;
    mul r7 2u128 into r31;
    div r30 r31 into r32;
    mul r26 r24 into r33;
    mul r32 2u128 into r34;
    add r33 r34 into r35;
    mul r35 r24 into r36;
    sub r26 1u128 into r37;
    mul r37 r24 into r38;
    mul 3u128 r32 into r39;
    add r38 r39 into r40;
    div r36 r40 into r41;
    gt r41 r24 into r42;
    ternary r42 r41 r24 into r43;
    lt r41 r24 into r44;
    ternary r44 r41 r24 into r45;
    sub r43 r45 into r46;
    lte r46 1u128 into r47;
    ternary r47 true false into r48;
    mul r41 r41 into r49;
    mul r6 2u128 into r50;
    div r49 r50 into r51;
    mul r51 r41 into r52;
    mul r7 2u128 into r53;
    div r52 r53 into r54;
    mul r26 r24 into r55;
    mul r54 2u128 into r56;
    add r55 r56 into r57;
    mul r57 r41 into r58;
    sub r26 1u128 into r59;
    mul r59 r41 into r60;
    mul 3u128 r54 into r61;
    add r60 r61 into r62;
    div r58 r62 into r63;
    gt r63 r41 into r64;
    ternary r64 r63 r41 into r65;
    lt r63 r41 into r66;
    ternary r66 r63 r41 into r67;
    sub r65 r67 into r68;
    lte r68 1u128 into r69;
    ternary r69 true false into r70;
    mul r63 r63 into r71;
    mul r6 2u128 into r72;
    div r71 r72 into r73;
    mul r73 r63 into r74;
    mul r7 2u128 into r75;
    div r74 r75 into r76;
    mul r26 r24 into r77;
    mul r76 2u128 into r78;
    add r77 r78 into r79;
    mul r79 r63 into r80;
    sub r26 1u128 into r81;
    mul r81 r63 into r82;
    mul 3u128 r76 into r83;
    add r82 r83 into r84;
    div r80 r84 into r85;
    gt r85 r63 into r86;
    ternary r86 r85 r63 into r87;
    lt r85 r63 into r88;
    ternary r88 r85 r63 into r89;
    sub r87 r89 into r90;
    lte r90 1u128 into r91;
    ternary r91 true false into r92;
    mul r85 r85 into r93;
    mul r6 2u128 into r94;
    div r93 r94 into r95;
    mul r95 r85 into r96;
    mul r7 2u128 into r97;
    div r96 r97 into r98;
    mul r26 r24 into r99;
    mul r98 2u128 into r100;
    add r99 r100 into r101;
    mul r101 r85 into r102;
    sub r26 1u128 into r103;
    mul r103 r85 into r104;
    mul 3u128 r98 into r105;
    add r104 r105 into r106;
    div r102 r106 into r107;
    gt r107 r85 into r108;
    ternary r108 r107 r85 into r109;
    lt r107 r85 into r110;
    ternary r110 r107 r85 into r111;
    sub r109 r111 into r112;
    lte r112 1u128 into r113;
    ternary r113 true false into r114;
    mul r107 r107 into r115;
    mul r6 2u128 into r116;
    div r115 r116 into r117;
    mul r117 r107 into r118;
    mul r7 2u128 into r119;
    div r118 r119 into r120;
    mul r26 r24 into r121;
    mul r120 2u128 into r122;
    add r121 r122 into r123;
    mul r123 r107 into r124;
    sub r26 1u128 into r125;
    mul r125 r107 into r126;
    mul 3u128 r120 into r127;
    add r126 r127 into r128;
    div r124 r128 into r129;
    gt r129 r107 into r130;
    ternary r130 r129 r107 into r131;
    lt r129 r107 into r132;
    ternary r132 r129 r107 into r133;
    sub r131 r133 into r134;
    lte r134 1u128 into r135;
    ternary r135 true false into r136;
    mul r129 r129 into r137;
    mul r6 2u128 into r138;
    div r137 r138 into r139;
    mul r139 r129 into r140;
    mul r7 2u128 into r141;
    div r140 r141 into r142;
    mul r26 r24 into r143;
    mul r142 2u128 into r144;
    add r143 r144 into r145;
    mul r145 r129 into r146;
    sub r26 1u128 into r147;
    mul r147 r129 into r148;
    mul 3u128 r142 into r149;
    add r148 r149 into r150;
    div r146 r150 into r151;
    gt r151 r129 into r152;
    ternary r152 r151 r129 into r153;
    lt r151 r129 into r154;
    ternary r154 r151 r129 into r155;
    sub r153 r155 into r156;
    lte r156 1u128 into r157;
    ternary r157 true false into r158;
    mul r151 r151 into r159;
    mul r6 2u128 into r160;
    div r159 r160 into r161;
    mul r161 r151 into r162;
    mul r7 2u128 into r163;
    div r162 r163 into r164;
    mul r26 r24 into r165;
    mul r164 2u128 into r166;
    add r165 r166 into r167;
    mul r167 r151 into r168;
    sub r26 1u128 into r169;
    mul r169 r151 into r170;
    mul 3u128 r164 into r171;
    add r170 r171 into r172;
    div r168 r172 into r173;
    gt r173 r151 into r174;
    ternary r174 r173 r151 into r175;
    lt r173 r151 into r176;
    ternary r176 r173 r151 into r177;
    sub r175 r177 into r178;
    lte r178 1u128 into r179;
    ternary r179 true false into r180;
    mul r173 r173 into r181;
    mul r6 2u128 into r182;
    div r181 r182 into r183;
    mul r183 r173 into r184;
    mul r7 2u128 into r185;
    div r184 r185 into r186;
    mul r26 r24 into r187;
    mul r186 2u128 into r188;
    add r187 r188 into r189;
    mul r189 r173 into r190;
    sub r26 1u128 into r191;
    mul r191 r173 into r192;
    mul 3u128 r186 into r193;
    add r192 r193 into r194;
    div r190 r194 into r195;
    gt r195 r173 into r196;
    ternary r196 r195 r173 into r197;
    lt r195 r173 into r198;
    ternary r198 r195 r173 into r199;
    sub r197 r199 into r200;
    lte r200 1u128 into r201;
    ternary r201 true false into r202;
    ternary r202 r195 r195 into r203;
    ternary r180 r173 r203 into r204;
    ternary r158 r151 r204 into r205;
    ternary r136 r129 r205 into r206;
    ternary r114 r107 r206 into r207;
    ternary r92 r85 r207 into r208;
    ternary r70 r63 r208 into r209;
    ternary r48 r41 r209 into r210;
    ternary r25 0u128 r210 into r211;
    mul r10 2u128 into r212;
    mul r211 r211 into r213;
    mul r18 2u128 into r214;
    div r213 r214 into r215;
    mul r215 r211 into r216;
    mul r212 2u128 into r217;
    div r216 r217 into r218;
    div r211 r212 into r219;
    add r18 r219 into r220;
    mul r211 r211 into r221;
    add r221 r218 into r222;
    mul 2u128 r211 into r223;
    add r223 r220 into r224;
    sub r224 r211 into r225;
    div r222 r225 into r226;
    gt r226 r211 into r227;
    ternary r227 r226 r211 into r228;
    lt r226 r211 into r229;
    ternary r229 r226 r211 into r230;
    sub r228 r230 into r231;
    lte r231 1u128 into r232;
    ternary r232 true false into r233;
    mul r226 r226 into r234;
    add r234 r218 into r235;
    mul 2u128 r226 into r236;
    add r236 r220 into r237;
    sub r237 r211 into r238;
    div r235 r238 into r239;
    gt r239 r226 into r240;
    ternary r240 r239 r226 into r241;
    lt r239 r226 into r242;
    ternary r242 r239 r226 into r243;
    sub r241 r243 into r244;
    lte r244 1u128 into r245;
    ternary r245 true false into r246;
    mul r239 r239 into r247;
    add r247 r218 into r248;
    mul 2u128 r239 into r249;
    add r249 r220 into r250;
    sub r250 r211 into r251;
    div r248 r251 into r252;
    gt r252 r239 into r253;
    ternary r253 r252 r239 into r254;
    lt r252 r239 into r255;
    ternary r255 r252 r239 into r256;
    sub r254 r256 into r257;
    lte r257 1u128 into r258;
    ternary r258 true false into r259;
    mul r252 r252 into r260;
    add r260 r218 into r261;
    mul 2u128 r252 into r262;
    add r262 r220 into r263;
    sub r263 r211 into r264;
    div r261 r264 into r265;
    gt r265 r252 into r266;
    ternary r266 r265 r252 into r267;
    lt r265 r252 into r268;
    ternary r268 r265 r252 into r269;
    sub r267 r269 into r270;
    lte r270 1u128 into r271;
    ternary r271 true false into r272;
    mul r265 r265 into r273;
    add r273 r218 into r274;
    mul 2u128 r265 into r275;
    add r275 r220 into r276;
    sub r276 r211 into r277;
    div r274 r277 into r278;
    gt r278 r265 into r279;
    ternary r279 r278 r265 into r280;
    lt r278 r265 into r281;
    ternary r281 r278 r265 into r282;
    sub r280 r282 into r283;
    lte r283 1u128 into r284;
    ternary r284 true false into r285;
    mul r278 r278 into r286;
    add r286 r218 into r287;
    mul 2u128 r278 into r288;
    add r288 r220 into r289;
    sub r289 r211 into r290;
    div r287 r290 into r291;
    gt r291 r278 into r292;
    ternary r292 r291 r278 into r293;
    lt r291 r278 into r294;
    ternary r294 r291 r278 into r295;
    sub r293 r295 into r296;
    lte r296 1u128 into r297;
    ternary r297 true false into r298;
    mul r291 r291 into r299;
    add r299 r218 into r300;
    mul 2u128 r291 into r301;
    add r301 r220 into r302;
    sub r302 r211 into r303;
    div r300 r303 into r304;
    gt r304 r291 into r305;
    ternary r305 r304 r291 into r306;
    lt r304 r291 into r307;
    ternary r307 r304 r291 into r308;
    sub r306 r308 into r309;
    lte r309 1u128 into r310;
    ternary r310 true false into r311;
    mul r304 r304 into r312;
    add r312 r218 into r313;
    mul 2u128 r304 into r314;
    add r314 r220 into r315;
    sub r315 r211 into r316;
    div r313 r316 into r317;
    gt r317 r304 into r318;
    ternary r318 r317 r304 into r319;
    lt r317 r304 into r320;
    ternary r320 r317 r304 into r321;
    sub r319 r321 into r322;
    lte r322 1u128 into r323;
    ternary r323 true false into r324;
    ternary r324 r317 r317 into r325;
    ternary r311 r304 r325 into r326;
    ternary r298 r291 r326 into r327;
    ternary r285 r278 r327 into r328;
    ternary r272 r265 r328 into r329;
    ternary r259 r252 r329 into r330;
    ternary r246 r239 r330 into r331;
    ternary r233 r226 r331 into r332;
    sub r17 r332 into r333;
    sub r333 1u128 into r334;
    gte r334 r5 into r335;
    assert.eq r335 true;
    call arcanetoken.aleo/transfer_private_to_public_arc r1 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r4 into r336 r337;
    call arcanetoken.aleo/transfer_public_to_private_arc r3 r0 r334 into r338 r339;
    async exchange r337 r339 r15 r17 r2 r4 r3 r334 into r340;
    output r336 as arcanetoken.aleo/ArcaneToken.record;
    output r338 as arcanetoken.aleo/ArcaneToken.record;
    output r340 as stableswap2.aleo/exchange.future;

finalize exchange:
    input r0 as arcanetoken.aleo/transfer_private_to_public_arc.future;
    input r1 as arcanetoken.aleo/transfer_public_to_private_arc.future;
    input r2 as u128.public;
    input r3 as u128.public;
    input r4 as u64.public;
    input r5 as u128.public;
    input r6 as u64.public;
    input r7 as u128.public;
    await r0;
    await r1;
    gt r4 r6 into r8;
    ternary r8 r6 r4 into r9;
    lte r4 r6 into r10;
    ternary r10 r6 r4 into r11;
    cast r9 r11 into r12 as PoolKey;
    hash.bhp256 r12 into r13 as field;
    get amm_pools[r13] into r14;
    is.eq r14.token1_id r4 into r15;
    ternary r15 r14.reserve1 r14.reserve2 into r16;
    is.eq r14.token2_id r4 into r17;
    ternary r17 r14.reserve1 r14.reserve2 into r18;
    gt r2 r16 into r19;
    ternary r19 r2 r16 into r20;
    lt r2 r16 into r21;
    ternary r21 r2 r16 into r22;
    sub r20 r22 into r23;
    lt r23 10u128 into r24;
    assert.eq r24 true;
    gt r3 r18 into r25;
    ternary r25 r3 r18 into r26;
    lt r3 r18 into r27;
    ternary r27 r3 r18 into r28;
    sub r26 r28 into r29;
    lt r29 10u128 into r30;
    assert.eq r30 true;
    add r16 r5 into r31;
    sub r18 r7 into r32;
    is.eq r14.token1_id r4 into r33;
    ternary r33 r31 r32 into r34;
    is.eq r14.token2_id r4 into r35;
    ternary r35 r31 r32 into r36;
    cast r14.id r14.token1_id r14.token2_id r34 r36 r14.ampl_coef r14.lp_total_supply r14.swap_fee into r37 as PoolInfo;
    set r37 into amm_pools[r13];


function create_pool_pric:
    input r0 as address.private;
    input r1 as credits.aleo/credits.record;
    input r2 as u64.private;
    input r3 as arcanetoken.aleo/ArcaneToken.record;
    input r4 as u128.private;
    input r5 as u128.private;
    input r6 as u128.private;
    gt r2 0u64 into r7;
    gt r4 0u128 into r8;
    and r7 r8 into r9;
    assert.eq r9 true;
    lte r6 10000u128 into r10;
    gte r5 0u128 into r11;
    and r10 r11 into r12;
    assert.eq r12 true;
    gte r1.microcredits r2 into r13;
    gte r3.amount r4 into r14;
    and r13 r14 into r15;
    assert.eq r15 true;
    call credits.aleo/transfer_private_to_public r1 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r2 into r16 r17;
    call arcanetoken.aleo/transfer_private_to_public_arc r3 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r4 into r18 r19;
    gt 0u64 r3.token_id into r20;
    ternary r20 r3.token_id 0u64 into r21;
    lte 0u64 r3.token_id into r22;
    ternary r22 r3.token_id 0u64 into r23;
    cast r21 r23 into r24 as PoolKey;
    hash.bhp256 r24 into r25 as field;
    cast r0 r25 into r26 as PoolAdmin.record;
    cast r2 into r27 as u128;
    async create_pool_pric r17 r19 r25 0u64 r27 r3.token_id r4 r5 r6 into r28;
    output r26 as PoolAdmin.record;
    output r16 as credits.aleo/credits.record;
    output r18 as arcanetoken.aleo/ArcaneToken.record;
    output r28 as stableswap2.aleo/create_pool_pric.future;

finalize create_pool_pric:
    input r0 as credits.aleo/transfer_private_to_public.future;
    input r1 as arcanetoken.aleo/transfer_private_to_public_arc.future;
    input r2 as field.public;
    input r3 as u64.public;
    input r4 as u128.public;
    input r5 as u64.public;
    input r6 as u128.public;
    input r7 as u128.public;
    input r8 as u128.public;
    await r0;
    await r1;
    contains amm_pools[r2] into r9;
    not r9 into r10;
    assert.eq r10 true;
    mul r4 r6 into r11;
    cast r2 r3 r5 r4 r6 r7 r11 r8 into r12 as PoolInfo;
    set r12 into amm_pools[r2];


function add_amm_liquidity_pric:
    input r0 as address.private;
    input r1 as credits.aleo/credits.record;
    input r2 as u64.private;
    input r3 as arcanetoken.aleo/ArcaneToken.record;
    input r4 as u128.private;
    input r5 as field.private;
    input r6 as u128.private;
    input r7 as u128.private;
    input r8 as u128.private;
    add r6 r7 into r9;
    is.eq r9 0u128 into r10;
    mul r8 2u128 into r11;
    mul r9 r9 into r12;
    mul r6 2u128 into r13;
    div r12 r13 into r14;
    mul r14 r9 into r15;
    mul r7 2u128 into r16;
    div r15 r16 into r17;
    mul r11 r9 into r18;
    mul r17 2u128 into r19;
    add r18 r19 into r20;
    mul r20 r9 into r21;
    sub r11 1u128 into r22;
    mul r22 r9 into r23;
    mul 3u128 r17 into r24;
    add r23 r24 into r25;
    div r21 r25 into r26;
    gt r26 r9 into r27;
    ternary r27 r26 r9 into r28;
    lt r26 r9 into r29;
    ternary r29 r26 r9 into r30;
    sub r28 r30 into r31;
    lte r31 1u128 into r32;
    ternary r32 true false into r33;
    mul r26 r26 into r34;
    mul r6 2u128 into r35;
    div r34 r35 into r36;
    mul r36 r26 into r37;
    mul r7 2u128 into r38;
    div r37 r38 into r39;
    mul r11 r9 into r40;
    mul r39 2u128 into r41;
    add r40 r41 into r42;
    mul r42 r26 into r43;
    sub r11 1u128 into r44;
    mul r44 r26 into r45;
    mul 3u128 r39 into r46;
    add r45 r46 into r47;
    div r43 r47 into r48;
    gt r48 r26 into r49;
    ternary r49 r48 r26 into r50;
    lt r48 r26 into r51;
    ternary r51 r48 r26 into r52;
    sub r50 r52 into r53;
    lte r53 1u128 into r54;
    ternary r54 true false into r55;
    mul r48 r48 into r56;
    mul r6 2u128 into r57;
    div r56 r57 into r58;
    mul r58 r48 into r59;
    mul r7 2u128 into r60;
    div r59 r60 into r61;
    mul r11 r9 into r62;
    mul r61 2u128 into r63;
    add r62 r63 into r64;
    mul r64 r48 into r65;
    sub r11 1u128 into r66;
    mul r66 r48 into r67;
    mul 3u128 r61 into r68;
    add r67 r68 into r69;
    div r65 r69 into r70;
    gt r70 r48 into r71;
    ternary r71 r70 r48 into r72;
    lt r70 r48 into r73;
    ternary r73 r70 r48 into r74;
    sub r72 r74 into r75;
    lte r75 1u128 into r76;
    ternary r76 true false into r77;
    mul r70 r70 into r78;
    mul r6 2u128 into r79;
    div r78 r79 into r80;
    mul r80 r70 into r81;
    mul r7 2u128 into r82;
    div r81 r82 into r83;
    mul r11 r9 into r84;
    mul r83 2u128 into r85;
    add r84 r85 into r86;
    mul r86 r70 into r87;
    sub r11 1u128 into r88;
    mul r88 r70 into r89;
    mul 3u128 r83 into r90;
    add r89 r90 into r91;
    div r87 r91 into r92;
    gt r92 r70 into r93;
    ternary r93 r92 r70 into r94;
    lt r92 r70 into r95;
    ternary r95 r92 r70 into r96;
    sub r94 r96 into r97;
    lte r97 1u128 into r98;
    ternary r98 true false into r99;
    mul r92 r92 into r100;
    mul r6 2u128 into r101;
    div r100 r101 into r102;
    mul r102 r92 into r103;
    mul r7 2u128 into r104;
    div r103 r104 into r105;
    mul r11 r9 into r106;
    mul r105 2u128 into r107;
    add r106 r107 into r108;
    mul r108 r92 into r109;
    sub r11 1u128 into r110;
    mul r110 r92 into r111;
    mul 3u128 r105 into r112;
    add r111 r112 into r113;
    div r109 r113 into r114;
    gt r114 r92 into r115;
    ternary r115 r114 r92 into r116;
    lt r114 r92 into r117;
    ternary r117 r114 r92 into r118;
    sub r116 r118 into r119;
    lte r119 1u128 into r120;
    ternary r120 true false into r121;
    mul r114 r114 into r122;
    mul r6 2u128 into r123;
    div r122 r123 into r124;
    mul r124 r114 into r125;
    mul r7 2u128 into r126;
    div r125 r126 into r127;
    mul r11 r9 into r128;
    mul r127 2u128 into r129;
    add r128 r129 into r130;
    mul r130 r114 into r131;
    sub r11 1u128 into r132;
    mul r132 r114 into r133;
    mul 3u128 r127 into r134;
    add r133 r134 into r135;
    div r131 r135 into r136;
    gt r136 r114 into r137;
    ternary r137 r136 r114 into r138;
    lt r136 r114 into r139;
    ternary r139 r136 r114 into r140;
    sub r138 r140 into r141;
    lte r141 1u128 into r142;
    ternary r142 true false into r143;
    mul r136 r136 into r144;
    mul r6 2u128 into r145;
    div r144 r145 into r146;
    mul r146 r136 into r147;
    mul r7 2u128 into r148;
    div r147 r148 into r149;
    mul r11 r9 into r150;
    mul r149 2u128 into r151;
    add r150 r151 into r152;
    mul r152 r136 into r153;
    sub r11 1u128 into r154;
    mul r154 r136 into r155;
    mul 3u128 r149 into r156;
    add r155 r156 into r157;
    div r153 r157 into r158;
    gt r158 r136 into r159;
    ternary r159 r158 r136 into r160;
    lt r158 r136 into r161;
    ternary r161 r158 r136 into r162;
    sub r160 r162 into r163;
    lte r163 1u128 into r164;
    ternary r164 true false into r165;
    mul r158 r158 into r166;
    mul r6 2u128 into r167;
    div r166 r167 into r168;
    mul r168 r158 into r169;
    mul r7 2u128 into r170;
    div r169 r170 into r171;
    mul r11 r9 into r172;
    mul r171 2u128 into r173;
    add r172 r173 into r174;
    mul r174 r158 into r175;
    sub r11 1u128 into r176;
    mul r176 r158 into r177;
    mul 3u128 r171 into r178;
    add r177 r178 into r179;
    div r175 r179 into r180;
    gt r180 r158 into r181;
    ternary r181 r180 r158 into r182;
    lt r180 r158 into r183;
    ternary r183 r180 r158 into r184;
    sub r182 r184 into r185;
    lte r185 1u128 into r186;
    ternary r186 true false into r187;
    ternary r187 r180 r180 into r188;
    ternary r165 r158 r188 into r189;
    ternary r143 r136 r189 into r190;
    ternary r121 r114 r190 into r191;
    ternary r99 r92 r191 into r192;
    ternary r77 r70 r192 into r193;
    ternary r55 r48 r193 into r194;
    ternary r33 r26 r194 into r195;
    ternary r10 0u128 r195 into r196;
    cast r2 into r197 as u128;
    add r6 r197 into r198;
    add r7 r4 into r199;
    add r198 r199 into r200;
    is.eq r200 0u128 into r201;
    mul r8 2u128 into r202;
    mul r200 r200 into r203;
    mul r198 2u128 into r204;
    div r203 r204 into r205;
    mul r205 r200 into r206;
    mul r199 2u128 into r207;
    div r206 r207 into r208;
    mul r202 r200 into r209;
    mul r208 2u128 into r210;
    add r209 r210 into r211;
    mul r211 r200 into r212;
    sub r202 1u128 into r213;
    mul r213 r200 into r214;
    mul 3u128 r208 into r215;
    add r214 r215 into r216;
    div r212 r216 into r217;
    gt r217 r200 into r218;
    ternary r218 r217 r200 into r219;
    lt r217 r200 into r220;
    ternary r220 r217 r200 into r221;
    sub r219 r221 into r222;
    lte r222 1u128 into r223;
    ternary r223 true false into r224;
    mul r217 r217 into r225;
    mul r198 2u128 into r226;
    div r225 r226 into r227;
    mul r227 r217 into r228;
    mul r199 2u128 into r229;
    div r228 r229 into r230;
    mul r202 r200 into r231;
    mul r230 2u128 into r232;
    add r231 r232 into r233;
    mul r233 r217 into r234;
    sub r202 1u128 into r235;
    mul r235 r217 into r236;
    mul 3u128 r230 into r237;
    add r236 r237 into r238;
    div r234 r238 into r239;
    gt r239 r217 into r240;
    ternary r240 r239 r217 into r241;
    lt r239 r217 into r242;
    ternary r242 r239 r217 into r243;
    sub r241 r243 into r244;
    lte r244 1u128 into r245;
    ternary r245 true false into r246;
    mul r239 r239 into r247;
    mul r198 2u128 into r248;
    div r247 r248 into r249;
    mul r249 r239 into r250;
    mul r199 2u128 into r251;
    div r250 r251 into r252;
    mul r202 r200 into r253;
    mul r252 2u128 into r254;
    add r253 r254 into r255;
    mul r255 r239 into r256;
    sub r202 1u128 into r257;
    mul r257 r239 into r258;
    mul 3u128 r252 into r259;
    add r258 r259 into r260;
    div r256 r260 into r261;
    gt r261 r239 into r262;
    ternary r262 r261 r239 into r263;
    lt r261 r239 into r264;
    ternary r264 r261 r239 into r265;
    sub r263 r265 into r266;
    lte r266 1u128 into r267;
    ternary r267 true false into r268;
    mul r261 r261 into r269;
    mul r198 2u128 into r270;
    div r269 r270 into r271;
    mul r271 r261 into r272;
    mul r199 2u128 into r273;
    div r272 r273 into r274;
    mul r202 r200 into r275;
    mul r274 2u128 into r276;
    add r275 r276 into r277;
    mul r277 r261 into r278;
    sub r202 1u128 into r279;
    mul r279 r261 into r280;
    mul 3u128 r274 into r281;
    add r280 r281 into r282;
    div r278 r282 into r283;
    gt r283 r261 into r284;
    ternary r284 r283 r261 into r285;
    lt r283 r261 into r286;
    ternary r286 r283 r261 into r287;
    sub r285 r287 into r288;
    lte r288 1u128 into r289;
    ternary r289 true false into r290;
    mul r283 r283 into r291;
    mul r198 2u128 into r292;
    div r291 r292 into r293;
    mul r293 r283 into r294;
    mul r199 2u128 into r295;
    div r294 r295 into r296;
    mul r202 r200 into r297;
    mul r296 2u128 into r298;
    add r297 r298 into r299;
    mul r299 r283 into r300;
    sub r202 1u128 into r301;
    mul r301 r283 into r302;
    mul 3u128 r296 into r303;
    add r302 r303 into r304;
    div r300 r304 into r305;
    gt r305 r283 into r306;
    ternary r306 r305 r283 into r307;
    lt r305 r283 into r308;
    ternary r308 r305 r283 into r309;
    sub r307 r309 into r310;
    lte r310 1u128 into r311;
    ternary r311 true false into r312;
    mul r305 r305 into r313;
    mul r198 2u128 into r314;
    div r313 r314 into r315;
    mul r315 r305 into r316;
    mul r199 2u128 into r317;
    div r316 r317 into r318;
    mul r202 r200 into r319;
    mul r318 2u128 into r320;
    add r319 r320 into r321;
    mul r321 r305 into r322;
    sub r202 1u128 into r323;
    mul r323 r305 into r324;
    mul 3u128 r318 into r325;
    add r324 r325 into r326;
    div r322 r326 into r327;
    gt r327 r305 into r328;
    ternary r328 r327 r305 into r329;
    lt r327 r305 into r330;
    ternary r330 r327 r305 into r331;
    sub r329 r331 into r332;
    lte r332 1u128 into r333;
    ternary r333 true false into r334;
    mul r327 r327 into r335;
    mul r198 2u128 into r336;
    div r335 r336 into r337;
    mul r337 r327 into r338;
    mul r199 2u128 into r339;
    div r338 r339 into r340;
    mul r202 r200 into r341;
    mul r340 2u128 into r342;
    add r341 r342 into r343;
    mul r343 r327 into r344;
    sub r202 1u128 into r345;
    mul r345 r327 into r346;
    mul 3u128 r340 into r347;
    add r346 r347 into r348;
    div r344 r348 into r349;
    gt r349 r327 into r350;
    ternary r350 r349 r327 into r351;
    lt r349 r327 into r352;
    ternary r352 r349 r327 into r353;
    sub r351 r353 into r354;
    lte r354 1u128 into r355;
    ternary r355 true false into r356;
    mul r349 r349 into r357;
    mul r198 2u128 into r358;
    div r357 r358 into r359;
    mul r359 r349 into r360;
    mul r199 2u128 into r361;
    div r360 r361 into r362;
    mul r202 r200 into r363;
    mul r362 2u128 into r364;
    add r363 r364 into r365;
    mul r365 r349 into r366;
    sub r202 1u128 into r367;
    mul r367 r349 into r368;
    mul 3u128 r362 into r369;
    add r368 r369 into r370;
    div r366 r370 into r371;
    gt r371 r349 into r372;
    ternary r372 r371 r349 into r373;
    lt r371 r349 into r374;
    ternary r374 r371 r349 into r375;
    sub r373 r375 into r376;
    lte r376 1u128 into r377;
    ternary r377 true false into r378;
    ternary r378 r371 r371 into r379;
    ternary r356 r349 r379 into r380;
    ternary r334 r327 r380 into r381;
    ternary r312 r305 r381 into r382;
    ternary r290 r283 r382 into r383;
    ternary r268 r261 r383 into r384;
    ternary r246 r239 r384 into r385;
    ternary r224 r217 r385 into r386;
    ternary r201 0u128 r386 into r387;
    gt r387 r196 into r388;
    assert.eq r388 true;
    call credits.aleo/transfer_private_to_public r1 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r2 into r389 r390;
    call arcanetoken.aleo/transfer_private_to_public_arc r3 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r4 into r391 r392;
    cast r0 0u64 r3.token_id r5 into r393 as LpTokenReceipt.record;
    cast r2 into r394 as u128;
    async add_amm_liquidity_pric r390 r392 r5 r394 r3.token_id r4 into r395;
    output r389 as credits.aleo/credits.record;
    output r391 as arcanetoken.aleo/ArcaneToken.record;
    output r393 as LpTokenReceipt.record;
    output r395 as stableswap2.aleo/add_amm_liquidity_pric.future;

finalize add_amm_liquidity_pric:
    input r0 as credits.aleo/transfer_private_to_public.future;
    input r1 as arcanetoken.aleo/transfer_private_to_public_arc.future;
    input r2 as field.public;
    input r3 as u128.public;
    input r4 as u64.public;
    input r5 as u128.public;
    await r0;
    await r1;
    gt 0u64 r4 into r6;
    ternary r6 r4 0u64 into r7;
    lte 0u64 r4 into r8;
    ternary r8 r4 0u64 into r9;
    cast r7 r9 into r10 as PoolKey;
    hash.bhp256 r10 into r11 as field;
    get amm_pools[r11] into r12;
    mul r3 r12.lp_total_supply into r13;
    div r13 r12.reserve1 into r14;
    mul r5 r12.lp_total_supply into r15;
    div r15 r12.reserve2 into r16;
    lt r14 r16 into r17;
    ternary r17 r14 r16 into r18;
    add r12.reserve1 r3 into r19;
    add r12.reserve2 r5 into r20;
    add r12.lp_total_supply r18 into r21;
    cast r12.id r12.token1_id r12.token2_id r19 r20 r12.ampl_coef r21 r12.swap_fee into r22 as PoolInfo;
    set r22 into amm_pools[r11];
    contains amm_deposits[r2] into r23;
    not r23 into r24;
    assert.eq r24 true;
    set r18 into amm_deposits[r2];


function remove_amm_liquidity_pric:
    input r0 as address.private;
    input r1 as LpTokenReceipt.record;
    input r2 as u64.private;
    input r3 as u128.private;
    call credits.aleo/transfer_public_to_private r0 r2 into r4 r5;
    call arcanetoken.aleo/transfer_public_to_private_arc r1.token2_id r0 r3 into r6 r7;
    cast r2 into r8 as u128;
    async remove_amm_liquidity_pric r5 r7 r1.deposit_id r1.token1_id r1.token2_id r8 r3 into r9;
    output r4 as credits.aleo/credits.record;
    output r6 as arcanetoken.aleo/ArcaneToken.record;
    output r9 as stableswap2.aleo/remove_amm_liquidity_pric.future;

finalize remove_amm_liquidity_pric:
    input r0 as credits.aleo/transfer_public_to_private.future;
    input r1 as arcanetoken.aleo/transfer_public_to_private_arc.future;
    input r2 as field.public;
    input r3 as u64.public;
    input r4 as u64.public;
    input r5 as u128.public;
    input r6 as u128.public;
    await r0;
    await r1;
    gt r3 r4 into r7;
    ternary r7 r4 r3 into r8;
    lte r3 r4 into r9;
    ternary r9 r4 r3 into r10;
    cast r8 r10 into r11 as PoolKey;
    hash.bhp256 r11 into r12 as field;
    get amm_pools[r12] into r13;
    get amm_deposits[r2] into r14;
    mul r14 r13.reserve1 into r15;
    div r15 r13.lp_total_supply into r16;
    mul r14 r13.reserve2 into r17;
    div r17 r13.lp_total_supply into r18;
    sub r16 r5 into r19;
    sub r18 r6 into r20;
    sub r13.reserve1 r16 into r21;
    sub r13.reserve2 r18 into r22;
    sub r13.lp_total_supply r14 into r23;
    cast r13.id r13.token1_id r13.token2_id r21 r22 r13.ampl_coef r23 r13.swap_fee into r24 as PoolInfo;
    set r24 into amm_pools[r12];
    remove amm_deposits[r2];


function swap_amm_pric_in:
    input r0 as address.private;
    input r1 as credits.aleo/credits.record;
    input r2 as u64.private;
    input r3 as u128.private;
    input r4 as u64.private;
    input r5 as u128.private;
    input r6 as u128.private;
    input r7 as u128.private;
    gt r5 0u128 into r8;
    assert.eq r8 true;
    gt r2 0u64 into r9;
    assert.eq r9 true;
    cast r2 into r10 as u128;
    add r10 r3 into r11;
    is.neq 0u64 r4 into r12;
    is.neq 0u64 0u64 into r13;
    and r12 r13 into r14;
    is.neq r4 0u64 into r15;
    and r14 r15 into r16;
    assert.eq r16 true;
    add r3 r6 into r17;
    is.eq r17 0u128 into r18;
    mul r7 2u128 into r19;
    mul r17 r17 into r20;
    mul r3 2u128 into r21;
    div r20 r21 into r22;
    mul r22 r17 into r23;
    mul r6 2u128 into r24;
    div r23 r24 into r25;
    mul r19 r17 into r26;
    mul r25 2u128 into r27;
    add r26 r27 into r28;
    mul r28 r17 into r29;
    sub r19 1u128 into r30;
    mul r30 r17 into r31;
    mul 3u128 r25 into r32;
    add r31 r32 into r33;
    div r29 r33 into r34;
    gt r34 r17 into r35;
    ternary r35 r34 r17 into r36;
    lt r34 r17 into r37;
    ternary r37 r34 r17 into r38;
    sub r36 r38 into r39;
    lte r39 1u128 into r40;
    ternary r40 true false into r41;
    mul r34 r34 into r42;
    mul r3 2u128 into r43;
    div r42 r43 into r44;
    mul r44 r34 into r45;
    mul r6 2u128 into r46;
    div r45 r46 into r47;
    mul r19 r17 into r48;
    mul r47 2u128 into r49;
    add r48 r49 into r50;
    mul r50 r34 into r51;
    sub r19 1u128 into r52;
    mul r52 r34 into r53;
    mul 3u128 r47 into r54;
    add r53 r54 into r55;
    div r51 r55 into r56;
    gt r56 r34 into r57;
    ternary r57 r56 r34 into r58;
    lt r56 r34 into r59;
    ternary r59 r56 r34 into r60;
    sub r58 r60 into r61;
    lte r61 1u128 into r62;
    ternary r62 true false into r63;
    mul r56 r56 into r64;
    mul r3 2u128 into r65;
    div r64 r65 into r66;
    mul r66 r56 into r67;
    mul r6 2u128 into r68;
    div r67 r68 into r69;
    mul r19 r17 into r70;
    mul r69 2u128 into r71;
    add r70 r71 into r72;
    mul r72 r56 into r73;
    sub r19 1u128 into r74;
    mul r74 r56 into r75;
    mul 3u128 r69 into r76;
    add r75 r76 into r77;
    div r73 r77 into r78;
    gt r78 r56 into r79;
    ternary r79 r78 r56 into r80;
    lt r78 r56 into r81;
    ternary r81 r78 r56 into r82;
    sub r80 r82 into r83;
    lte r83 1u128 into r84;
    ternary r84 true false into r85;
    mul r78 r78 into r86;
    mul r3 2u128 into r87;
    div r86 r87 into r88;
    mul r88 r78 into r89;
    mul r6 2u128 into r90;
    div r89 r90 into r91;
    mul r19 r17 into r92;
    mul r91 2u128 into r93;
    add r92 r93 into r94;
    mul r94 r78 into r95;
    sub r19 1u128 into r96;
    mul r96 r78 into r97;
    mul 3u128 r91 into r98;
    add r97 r98 into r99;
    div r95 r99 into r100;
    gt r100 r78 into r101;
    ternary r101 r100 r78 into r102;
    lt r100 r78 into r103;
    ternary r103 r100 r78 into r104;
    sub r102 r104 into r105;
    lte r105 1u128 into r106;
    ternary r106 true false into r107;
    mul r100 r100 into r108;
    mul r3 2u128 into r109;
    div r108 r109 into r110;
    mul r110 r100 into r111;
    mul r6 2u128 into r112;
    div r111 r112 into r113;
    mul r19 r17 into r114;
    mul r113 2u128 into r115;
    add r114 r115 into r116;
    mul r116 r100 into r117;
    sub r19 1u128 into r118;
    mul r118 r100 into r119;
    mul 3u128 r113 into r120;
    add r119 r120 into r121;
    div r117 r121 into r122;
    gt r122 r100 into r123;
    ternary r123 r122 r100 into r124;
    lt r122 r100 into r125;
    ternary r125 r122 r100 into r126;
    sub r124 r126 into r127;
    lte r127 1u128 into r128;
    ternary r128 true false into r129;
    mul r122 r122 into r130;
    mul r3 2u128 into r131;
    div r130 r131 into r132;
    mul r132 r122 into r133;
    mul r6 2u128 into r134;
    div r133 r134 into r135;
    mul r19 r17 into r136;
    mul r135 2u128 into r137;
    add r136 r137 into r138;
    mul r138 r122 into r139;
    sub r19 1u128 into r140;
    mul r140 r122 into r141;
    mul 3u128 r135 into r142;
    add r141 r142 into r143;
    div r139 r143 into r144;
    gt r144 r122 into r145;
    ternary r145 r144 r122 into r146;
    lt r144 r122 into r147;
    ternary r147 r144 r122 into r148;
    sub r146 r148 into r149;
    lte r149 1u128 into r150;
    ternary r150 true false into r151;
    mul r144 r144 into r152;
    mul r3 2u128 into r153;
    div r152 r153 into r154;
    mul r154 r144 into r155;
    mul r6 2u128 into r156;
    div r155 r156 into r157;
    mul r19 r17 into r158;
    mul r157 2u128 into r159;
    add r158 r159 into r160;
    mul r160 r144 into r161;
    sub r19 1u128 into r162;
    mul r162 r144 into r163;
    mul 3u128 r157 into r164;
    add r163 r164 into r165;
    div r161 r165 into r166;
    gt r166 r144 into r167;
    ternary r167 r166 r144 into r168;
    lt r166 r144 into r169;
    ternary r169 r166 r144 into r170;
    sub r168 r170 into r171;
    lte r171 1u128 into r172;
    ternary r172 true false into r173;
    mul r166 r166 into r174;
    mul r3 2u128 into r175;
    div r174 r175 into r176;
    mul r176 r166 into r177;
    mul r6 2u128 into r178;
    div r177 r178 into r179;
    mul r19 r17 into r180;
    mul r179 2u128 into r181;
    add r180 r181 into r182;
    mul r182 r166 into r183;
    sub r19 1u128 into r184;
    mul r184 r166 into r185;
    mul 3u128 r179 into r186;
    add r185 r186 into r187;
    div r183 r187 into r188;
    gt r188 r166 into r189;
    ternary r189 r188 r166 into r190;
    lt r188 r166 into r191;
    ternary r191 r188 r166 into r192;
    sub r190 r192 into r193;
    lte r193 1u128 into r194;
    ternary r194 true false into r195;
    ternary r195 r188 r188 into r196;
    ternary r173 r166 r196 into r197;
    ternary r151 r144 r197 into r198;
    ternary r129 r122 r198 into r199;
    ternary r107 r100 r199 into r200;
    ternary r85 r78 r200 into r201;
    ternary r63 r56 r201 into r202;
    ternary r41 r34 r202 into r203;
    ternary r18 0u128 r203 into r204;
    mul r7 2u128 into r205;
    mul r204 r204 into r206;
    mul r11 2u128 into r207;
    div r206 r207 into r208;
    mul r208 r204 into r209;
    mul r205 2u128 into r210;
    div r209 r210 into r211;
    div r204 r205 into r212;
    add r11 r212 into r213;
    mul r204 r204 into r214;
    add r214 r211 into r215;
    mul 2u128 r204 into r216;
    add r216 r213 into r217;
    sub r217 r204 into r218;
    div r215 r218 into r219;
    gt r219 r204 into r220;
    ternary r220 r219 r204 into r221;
    lt r219 r204 into r222;
    ternary r222 r219 r204 into r223;
    sub r221 r223 into r224;
    lte r224 1u128 into r225;
    ternary r225 true false into r226;
    mul r219 r219 into r227;
    add r227 r211 into r228;
    mul 2u128 r219 into r229;
    add r229 r213 into r230;
    sub r230 r204 into r231;
    div r228 r231 into r232;
    gt r232 r219 into r233;
    ternary r233 r232 r219 into r234;
    lt r232 r219 into r235;
    ternary r235 r232 r219 into r236;
    sub r234 r236 into r237;
    lte r237 1u128 into r238;
    ternary r238 true false into r239;
    mul r232 r232 into r240;
    add r240 r211 into r241;
    mul 2u128 r232 into r242;
    add r242 r213 into r243;
    sub r243 r204 into r244;
    div r241 r244 into r245;
    gt r245 r232 into r246;
    ternary r246 r245 r232 into r247;
    lt r245 r232 into r248;
    ternary r248 r245 r232 into r249;
    sub r247 r249 into r250;
    lte r250 1u128 into r251;
    ternary r251 true false into r252;
    mul r245 r245 into r253;
    add r253 r211 into r254;
    mul 2u128 r245 into r255;
    add r255 r213 into r256;
    sub r256 r204 into r257;
    div r254 r257 into r258;
    gt r258 r245 into r259;
    ternary r259 r258 r245 into r260;
    lt r258 r245 into r261;
    ternary r261 r258 r245 into r262;
    sub r260 r262 into r263;
    lte r263 1u128 into r264;
    ternary r264 true false into r265;
    mul r258 r258 into r266;
    add r266 r211 into r267;
    mul 2u128 r258 into r268;
    add r268 r213 into r269;
    sub r269 r204 into r270;
    div r267 r270 into r271;
    gt r271 r258 into r272;
    ternary r272 r271 r258 into r273;
    lt r271 r258 into r274;
    ternary r274 r271 r258 into r275;
    sub r273 r275 into r276;
    lte r276 1u128 into r277;
    ternary r277 true false into r278;
    mul r271 r271 into r279;
    add r279 r211 into r280;
    mul 2u128 r271 into r281;
    add r281 r213 into r282;
    sub r282 r204 into r283;
    div r280 r283 into r284;
    gt r284 r271 into r285;
    ternary r285 r284 r271 into r286;
    lt r284 r271 into r287;
    ternary r287 r284 r271 into r288;
    sub r286 r288 into r289;
    lte r289 1u128 into r290;
    ternary r290 true false into r291;
    mul r284 r284 into r292;
    add r292 r211 into r293;
    mul 2u128 r284 into r294;
    add r294 r213 into r295;
    sub r295 r204 into r296;
    div r293 r296 into r297;
    gt r297 r284 into r298;
    ternary r298 r297 r284 into r299;
    lt r297 r284 into r300;
    ternary r300 r297 r284 into r301;
    sub r299 r301 into r302;
    lte r302 1u128 into r303;
    ternary r303 true false into r304;
    mul r297 r297 into r305;
    add r305 r211 into r306;
    mul 2u128 r297 into r307;
    add r307 r213 into r308;
    sub r308 r204 into r309;
    div r306 r309 into r310;
    gt r310 r297 into r311;
    ternary r311 r310 r297 into r312;
    lt r310 r297 into r313;
    ternary r313 r310 r297 into r314;
    sub r312 r314 into r315;
    lte r315 1u128 into r316;
    ternary r316 true false into r317;
    ternary r317 r310 r310 into r318;
    ternary r304 r297 r318 into r319;
    ternary r291 r284 r319 into r320;
    ternary r278 r271 r320 into r321;
    ternary r265 r258 r321 into r322;
    ternary r252 r245 r322 into r323;
    ternary r239 r232 r323 into r324;
    ternary r226 r219 r324 into r325;
    sub r6 r325 into r326;
    sub r326 1u128 into r327;
    gte r327 r5 into r328;
    assert.eq r328 true;
    call credits.aleo/transfer_private_to_public r1 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r2 into r329 r330;
    call arcanetoken.aleo/transfer_public_to_private_arc r4 r0 r327 into r331 r332;
    cast r2 into r333 as u128;
    async swap_amm_pric_in r330 r332 r3 r6 r333 r4 r327 into r334;
    output r329 as credits.aleo/credits.record;
    output r331 as arcanetoken.aleo/ArcaneToken.record;
    output r334 as stableswap2.aleo/swap_amm_pric_in.future;

finalize swap_amm_pric_in:
    input r0 as credits.aleo/transfer_private_to_public.future;
    input r1 as arcanetoken.aleo/transfer_public_to_private_arc.future;
    input r2 as u128.public;
    input r3 as u128.public;
    input r4 as u128.public;
    input r5 as u64.public;
    input r6 as u128.public;
    await r0;
    await r1;
    gt 0u64 r5 into r7;
    ternary r7 r5 0u64 into r8;
    lte 0u64 r5 into r9;
    ternary r9 r5 0u64 into r10;
    cast r8 r10 into r11 as PoolKey;
    hash.bhp256 r11 into r12 as field;
    get amm_pools[r12] into r13;
    is.eq r13.token1_id 0u64 into r14;
    ternary r14 r13.reserve1 r13.reserve2 into r15;
    is.eq r13.token2_id 0u64 into r16;
    ternary r16 r13.reserve1 r13.reserve2 into r17;
    gt r2 r15 into r18;
    ternary r18 r2 r15 into r19;
    lt r2 r15 into r20;
    ternary r20 r2 r15 into r21;
    sub r19 r21 into r22;
    lt r22 10u128 into r23;
    assert.eq r23 true;
    gt r3 r17 into r24;
    ternary r24 r3 r17 into r25;
    lt r3 r17 into r26;
    ternary r26 r3 r17 into r27;
    sub r25 r27 into r28;
    lt r28 10u128 into r29;
    assert.eq r29 true;
    add r15 r4 into r30;
    sub r17 r6 into r31;
    is.eq r13.token1_id 0u64 into r32;
    ternary r32 r30 r31 into r33;
    is.eq r13.token2_id 0u64 into r34;
    ternary r34 r30 r31 into r35;
    cast r13.id r13.token1_id r13.token2_id r33 r35 r13.ampl_coef r13.lp_total_supply r13.swap_fee into r36 as PoolInfo;
    set r36 into amm_pools[r12];


function swap_amm_pric_out:
    input r0 as address.private;
    input r1 as arcanetoken.aleo/ArcaneToken.record;
    input r2 as u128.private;
    input r3 as u128.private;
    input r4 as u64.private;
    input r5 as u64.private;
    input r6 as u128.private;
    input r7 as u128.private;
    gt r5 0u64 into r8;
    assert.eq r8 true;
    sub r1.amount r2 into r9;
    add r2 r3 into r10;
    cast r4 into r11 as u128;
    is.neq r1.token_id 0u64 into r12;
    is.neq r1.token_id 0u64 into r13;
    and r12 r13 into r14;
    is.neq 0u64 0u64 into r15;
    and r14 r15 into r16;
    assert.eq r16 true;
    add r3 r11 into r17;
    is.eq r17 0u128 into r18;
    mul r6 2u128 into r19;
    mul r17 r17 into r20;
    mul r3 2u128 into r21;
    div r20 r21 into r22;
    mul r22 r17 into r23;
    mul r11 2u128 into r24;
    div r23 r24 into r25;
    mul r19 r17 into r26;
    mul r25 2u128 into r27;
    add r26 r27 into r28;
    mul r28 r17 into r29;
    sub r19 1u128 into r30;
    mul r30 r17 into r31;
    mul 3u128 r25 into r32;
    add r31 r32 into r33;
    div r29 r33 into r34;
    gt r34 r17 into r35;
    ternary r35 r34 r17 into r36;
    lt r34 r17 into r37;
    ternary r37 r34 r17 into r38;
    sub r36 r38 into r39;
    lte r39 1u128 into r40;
    ternary r40 true false into r41;
    mul r34 r34 into r42;
    mul r3 2u128 into r43;
    div r42 r43 into r44;
    mul r44 r34 into r45;
    mul r11 2u128 into r46;
    div r45 r46 into r47;
    mul r19 r17 into r48;
    mul r47 2u128 into r49;
    add r48 r49 into r50;
    mul r50 r34 into r51;
    sub r19 1u128 into r52;
    mul r52 r34 into r53;
    mul 3u128 r47 into r54;
    add r53 r54 into r55;
    div r51 r55 into r56;
    gt r56 r34 into r57;
    ternary r57 r56 r34 into r58;
    lt r56 r34 into r59;
    ternary r59 r56 r34 into r60;
    sub r58 r60 into r61;
    lte r61 1u128 into r62;
    ternary r62 true false into r63;
    mul r56 r56 into r64;
    mul r3 2u128 into r65;
    div r64 r65 into r66;
    mul r66 r56 into r67;
    mul r11 2u128 into r68;
    div r67 r68 into r69;
    mul r19 r17 into r70;
    mul r69 2u128 into r71;
    add r70 r71 into r72;
    mul r72 r56 into r73;
    sub r19 1u128 into r74;
    mul r74 r56 into r75;
    mul 3u128 r69 into r76;
    add r75 r76 into r77;
    div r73 r77 into r78;
    gt r78 r56 into r79;
    ternary r79 r78 r56 into r80;
    lt r78 r56 into r81;
    ternary r81 r78 r56 into r82;
    sub r80 r82 into r83;
    lte r83 1u128 into r84;
    ternary r84 true false into r85;
    mul r78 r78 into r86;
    mul r3 2u128 into r87;
    div r86 r87 into r88;
    mul r88 r78 into r89;
    mul r11 2u128 into r90;
    div r89 r90 into r91;
    mul r19 r17 into r92;
    mul r91 2u128 into r93;
    add r92 r93 into r94;
    mul r94 r78 into r95;
    sub r19 1u128 into r96;
    mul r96 r78 into r97;
    mul 3u128 r91 into r98;
    add r97 r98 into r99;
    div r95 r99 into r100;
    gt r100 r78 into r101;
    ternary r101 r100 r78 into r102;
    lt r100 r78 into r103;
    ternary r103 r100 r78 into r104;
    sub r102 r104 into r105;
    lte r105 1u128 into r106;
    ternary r106 true false into r107;
    mul r100 r100 into r108;
    mul r3 2u128 into r109;
    div r108 r109 into r110;
    mul r110 r100 into r111;
    mul r11 2u128 into r112;
    div r111 r112 into r113;
    mul r19 r17 into r114;
    mul r113 2u128 into r115;
    add r114 r115 into r116;
    mul r116 r100 into r117;
    sub r19 1u128 into r118;
    mul r118 r100 into r119;
    mul 3u128 r113 into r120;
    add r119 r120 into r121;
    div r117 r121 into r122;
    gt r122 r100 into r123;
    ternary r123 r122 r100 into r124;
    lt r122 r100 into r125;
    ternary r125 r122 r100 into r126;
    sub r124 r126 into r127;
    lte r127 1u128 into r128;
    ternary r128 true false into r129;
    mul r122 r122 into r130;
    mul r3 2u128 into r131;
    div r130 r131 into r132;
    mul r132 r122 into r133;
    mul r11 2u128 into r134;
    div r133 r134 into r135;
    mul r19 r17 into r136;
    mul r135 2u128 into r137;
    add r136 r137 into r138;
    mul r138 r122 into r139;
    sub r19 1u128 into r140;
    mul r140 r122 into r141;
    mul 3u128 r135 into r142;
    add r141 r142 into r143;
    div r139 r143 into r144;
    gt r144 r122 into r145;
    ternary r145 r144 r122 into r146;
    lt r144 r122 into r147;
    ternary r147 r144 r122 into r148;
    sub r146 r148 into r149;
    lte r149 1u128 into r150;
    ternary r150 true false into r151;
    mul r144 r144 into r152;
    mul r3 2u128 into r153;
    div r152 r153 into r154;
    mul r154 r144 into r155;
    mul r11 2u128 into r156;
    div r155 r156 into r157;
    mul r19 r17 into r158;
    mul r157 2u128 into r159;
    add r158 r159 into r160;
    mul r160 r144 into r161;
    sub r19 1u128 into r162;
    mul r162 r144 into r163;
    mul 3u128 r157 into r164;
    add r163 r164 into r165;
    div r161 r165 into r166;
    gt r166 r144 into r167;
    ternary r167 r166 r144 into r168;
    lt r166 r144 into r169;
    ternary r169 r166 r144 into r170;
    sub r168 r170 into r171;
    lte r171 1u128 into r172;
    ternary r172 true false into r173;
    mul r166 r166 into r174;
    mul r3 2u128 into r175;
    div r174 r175 into r176;
    mul r176 r166 into r177;
    mul r11 2u128 into r178;
    div r177 r178 into r179;
    mul r19 r17 into r180;
    mul r179 2u128 into r181;
    add r180 r181 into r182;
    mul r182 r166 into r183;
    sub r19 1u128 into r184;
    mul r184 r166 into r185;
    mul 3u128 r179 into r186;
    add r185 r186 into r187;
    div r183 r187 into r188;
    gt r188 r166 into r189;
    ternary r189 r188 r166 into r190;
    lt r188 r166 into r191;
    ternary r191 r188 r166 into r192;
    sub r190 r192 into r193;
    lte r193 1u128 into r194;
    ternary r194 true false into r195;
    ternary r195 r188 r188 into r196;
    ternary r173 r166 r196 into r197;
    ternary r151 r144 r197 into r198;
    ternary r129 r122 r198 into r199;
    ternary r107 r100 r199 into r200;
    ternary r85 r78 r200 into r201;
    ternary r63 r56 r201 into r202;
    ternary r41 r34 r202 into r203;
    ternary r18 0u128 r203 into r204;
    mul r6 2u128 into r205;
    mul r204 r204 into r206;
    mul r10 2u128 into r207;
    div r206 r207 into r208;
    mul r208 r204 into r209;
    mul r205 2u128 into r210;
    div r209 r210 into r211;
    div r204 r205 into r212;
    add r10 r212 into r213;
    mul r204 r204 into r214;
    add r214 r211 into r215;
    mul 2u128 r204 into r216;
    add r216 r213 into r217;
    sub r217 r204 into r218;
    div r215 r218 into r219;
    gt r219 r204 into r220;
    ternary r220 r219 r204 into r221;
    lt r219 r204 into r222;
    ternary r222 r219 r204 into r223;
    sub r221 r223 into r224;
    lte r224 1u128 into r225;
    ternary r225 true false into r226;
    mul r219 r219 into r227;
    add r227 r211 into r228;
    mul 2u128 r219 into r229;
    add r229 r213 into r230;
    sub r230 r204 into r231;
    div r228 r231 into r232;
    gt r232 r219 into r233;
    ternary r233 r232 r219 into r234;
    lt r232 r219 into r235;
    ternary r235 r232 r219 into r236;
    sub r234 r236 into r237;
    lte r237 1u128 into r238;
    ternary r238 true false into r239;
    mul r232 r232 into r240;
    add r240 r211 into r241;
    mul 2u128 r232 into r242;
    add r242 r213 into r243;
    sub r243 r204 into r244;
    div r241 r244 into r245;
    gt r245 r232 into r246;
    ternary r246 r245 r232 into r247;
    lt r245 r232 into r248;
    ternary r248 r245 r232 into r249;
    sub r247 r249 into r250;
    lte r250 1u128 into r251;
    ternary r251 true false into r252;
    mul r245 r245 into r253;
    add r253 r211 into r254;
    mul 2u128 r245 into r255;
    add r255 r213 into r256;
    sub r256 r204 into r257;
    div r254 r257 into r258;
    gt r258 r245 into r259;
    ternary r259 r258 r245 into r260;
    lt r258 r245 into r261;
    ternary r261 r258 r245 into r262;
    sub r260 r262 into r263;
    lte r263 1u128 into r264;
    ternary r264 true false into r265;
    mul r258 r258 into r266;
    add r266 r211 into r267;
    mul 2u128 r258 into r268;
    add r268 r213 into r269;
    sub r269 r204 into r270;
    div r267 r270 into r271;
    gt r271 r258 into r272;
    ternary r272 r271 r258 into r273;
    lt r271 r258 into r274;
    ternary r274 r271 r258 into r275;
    sub r273 r275 into r276;
    lte r276 1u128 into r277;
    ternary r277 true false into r278;
    mul r271 r271 into r279;
    add r279 r211 into r280;
    mul 2u128 r271 into r281;
    add r281 r213 into r282;
    sub r282 r204 into r283;
    div r280 r283 into r284;
    gt r284 r271 into r285;
    ternary r285 r284 r271 into r286;
    lt r284 r271 into r287;
    ternary r287 r284 r271 into r288;
    sub r286 r288 into r289;
    lte r289 1u128 into r290;
    ternary r290 true false into r291;
    mul r284 r284 into r292;
    add r292 r211 into r293;
    mul 2u128 r284 into r294;
    add r294 r213 into r295;
    sub r295 r204 into r296;
    div r293 r296 into r297;
    gt r297 r284 into r298;
    ternary r298 r297 r284 into r299;
    lt r297 r284 into r300;
    ternary r300 r297 r284 into r301;
    sub r299 r301 into r302;
    lte r302 1u128 into r303;
    ternary r303 true false into r304;
    mul r297 r297 into r305;
    add r305 r211 into r306;
    mul 2u128 r297 into r307;
    add r307 r213 into r308;
    sub r308 r204 into r309;
    div r306 r309 into r310;
    gt r310 r297 into r311;
    ternary r311 r310 r297 into r312;
    lt r310 r297 into r313;
    ternary r313 r310 r297 into r314;
    sub r312 r314 into r315;
    lte r315 1u128 into r316;
    ternary r316 true false into r317;
    ternary r317 r310 r310 into r318;
    ternary r304 r297 r318 into r319;
    ternary r291 r284 r319 into r320;
    ternary r278 r271 r320 into r321;
    ternary r265 r258 r321 into r322;
    ternary r252 r245 r322 into r323;
    ternary r239 r232 r323 into r324;
    ternary r226 r219 r324 into r325;
    cast r4 into r326 as u128;
    sub r326 r325 into r327;
    sub r327 1u128 into r328;
    cast r5 into r329 as u128;
    gte r328 r329 into r330;
    assert.eq r330 true;
    call arcanetoken.aleo/transfer_private_to_public_arc r1 aleo1hy8w46tflux7zwpeaw8ny7tq6wkzqux40z75a9ah3q9tqa4t758qltkqu7 r2 into r331 r332;
    cast r328 into r333 as u64;
    call credits.aleo/transfer_public_to_private r0 r333 into r334 r335;
    cast r4 into r336 as u128;
    async swap_amm_pric_out r332 r335 r3 r336 r1.token_id r2 r328 into r337;
    output r331 as arcanetoken.aleo/ArcaneToken.record;
    output r334 as credits.aleo/credits.record;
    output r337 as stableswap2.aleo/swap_amm_pric_out.future;

finalize swap_amm_pric_out:
    input r0 as arcanetoken.aleo/transfer_private_to_public_arc.future;
    input r1 as credits.aleo/transfer_public_to_private.future;
    input r2 as u128.public;
    input r3 as u128.public;
    input r4 as u64.public;
    input r5 as u128.public;
    input r6 as u128.public;
    await r0;
    await r1;
    gt r4 0u64 into r7;
    ternary r7 0u64 r4 into r8;
    lte r4 0u64 into r9;
    ternary r9 0u64 r4 into r10;
    cast r8 r10 into r11 as PoolKey;
    hash.bhp256 r11 into r12 as field;
    get amm_pools[r12] into r13;
    is.eq r13.token1_id r4 into r14;
    ternary r14 r13.reserve1 r13.reserve2 into r15;
    is.eq r13.token2_id r4 into r16;
    ternary r16 r13.reserve1 r13.reserve2 into r17;
    gt r2 r15 into r18;
    ternary r18 r2 r15 into r19;
    lt r2 r15 into r20;
    ternary r20 r2 r15 into r21;
    sub r19 r21 into r22;
    lt r22 10u128 into r23;
    assert.eq r23 true;
    gt r3 r17 into r24;
    ternary r24 r3 r17 into r25;
    lt r3 r17 into r26;
    ternary r26 r3 r17 into r27;
    sub r25 r27 into r28;
    lt r28 10u128 into r29;
    assert.eq r29 true;
    add r15 r5 into r30;
    sub r17 r6 into r31;
    is.eq r13.token1_id r4 into r32;
    ternary r32 r30 r31 into r33;
    is.eq r13.token2_id r4 into r34;
    ternary r34 r30 r31 into r35;
    cast r13.id r13.token1_id r13.token2_id r33 r35 r13.ampl_coef r13.lp_total_supply r13.swap_fee into r36 as PoolInfo;
    set r36 into amm_pools[r12];


function main:
    input r0 as u32.private;
    gt 5u32 3u32 into r1;
    gt 3u32 4u32 into r2;
    and r1 r2 into r3;
    gt 3u32 1u32 into r4;
    gt 1u32 5u32 into r5;
    and r4 r5 into r6;
    ternary r6 1u32 1u32 into r7;
    ternary r3 3u32 r7 into r8;
    gt 1u128 2u128 into r9;
    gt 2u128 3u128 into r10;
    and r9 r10 into r11;
    gt 2u128 1u128 into r12;
    gt 1u128 3u128 into r13;
    and r12 r13 into r14;
    ternary r14 1u128 3u128 into r15;
    ternary r11 2u128 r15 into r16;
    output r16 as u128.private;
